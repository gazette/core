// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: service.proto

/*
	Package consumer is a generated protocol buffer package.

	It is generated from these files:
		service.proto

	It has these top-level messages:
		Empty
		ConsumerState
*/
package consumer

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_LiveRamp_gazette_pkg_journal "github.com/LiveRamp/gazette/pkg/journal"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Status of the replica shard.
type ConsumerState_Replica_Status int32

const (
	ConsumerState_Replica_INVALID    ConsumerState_Replica_Status = 0
	ConsumerState_Replica_RECOVERING ConsumerState_Replica_Status = 1
	ConsumerState_Replica_READY      ConsumerState_Replica_Status = 2
	ConsumerState_Replica_PRIMARY    ConsumerState_Replica_Status = 3
)

var ConsumerState_Replica_Status_name = map[int32]string{
	0: "INVALID",
	1: "RECOVERING",
	2: "READY",
	3: "PRIMARY",
}
var ConsumerState_Replica_Status_value = map[string]int32{
	"INVALID":    0,
	"RECOVERING": 1,
	"READY":      2,
	"PRIMARY":    3,
}

func (x ConsumerState_Replica_Status) String() string {
	return proto.EnumName(ConsumerState_Replica_Status_name, int32(x))
}
func (ConsumerState_Replica_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorService, []int{1, 0, 0}
}

// Empty is an empty message, which exists to support RPC APIs taking no arguments.
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{0} }

// ConsumerState is a snapshot of the state of a Gazette consumer,
// including all shards of the consumer and the current set of shard
// replicas.
type ConsumerState struct {
	// Etcd path which roots this consumer.
	Root string `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
	// Identifier which uniquely identifies this consumer instance.
	LocalRouteKey string `protobuf:"bytes,2,opt,name=local_route_key,json=localRouteKey,proto3" json:"local_route_key,omitempty"`
	// Degree of Shard stand-by replication employed by the consumer.
	ReplicaCount int32 `protobuf:"varint,3,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	// All live peer endpoints of the consumer, in sorted "host:port" network format.
	Endpoints []string `protobuf:"bytes,4,rep,name=endpoints" json:"endpoints,omitempty"`
	// All Shards of this Consumer, in sorted Shard id order.
	Shards []ConsumerState_Shard `protobuf:"bytes,5,rep,name=shards" json:"shards"`
}

func (m *ConsumerState) Reset()                    { *m = ConsumerState{} }
func (m *ConsumerState) String() string            { return proto.CompactTextString(m) }
func (*ConsumerState) ProtoMessage()               {}
func (*ConsumerState) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1} }

func (m *ConsumerState) GetRoot() string {
	if m != nil {
		return m.Root
	}
	return ""
}

func (m *ConsumerState) GetLocalRouteKey() string {
	if m != nil {
		return m.LocalRouteKey
	}
	return ""
}

func (m *ConsumerState) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *ConsumerState) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *ConsumerState) GetShards() []ConsumerState_Shard {
	if m != nil {
		return m.Shards
	}
	return nil
}

type ConsumerState_Replica struct {
	// Addressable endpoint of the replica, in "host:port" network format.
	Endpoint string                       `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Status   ConsumerState_Replica_Status `protobuf:"varint,2,opt,name=status,proto3,enum=consumer.ConsumerState_Replica_Status" json:"status,omitempty"`
}

func (m *ConsumerState_Replica) Reset()                    { *m = ConsumerState_Replica{} }
func (m *ConsumerState_Replica) String() string            { return proto.CompactTextString(m) }
func (*ConsumerState_Replica) ProtoMessage()               {}
func (*ConsumerState_Replica) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1, 0} }

func (m *ConsumerState_Replica) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *ConsumerState_Replica) GetStatus() ConsumerState_Replica_Status {
	if m != nil {
		return m.Status
	}
	return ConsumerState_Replica_INVALID
}

type ConsumerState_Shard struct {
	// The unique ID of this Shard.
	Id ShardID `protobuf:"bytes,1,opt,name=id,proto3,casttype=ShardID" json:"id,omitempty"`
	// The topic name of this Shard.
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// The journal name of this Shard's topic partition.
	Partition github_com_LiveRamp_gazette_pkg_journal.Name `protobuf:"bytes,3,opt,name=partition,proto3,casttype=github.com/LiveRamp/gazette/pkg/journal.Name" json:"partition,omitempty"`
	// Assigned replicas and their processing status.
	Replicas []ConsumerState_Replica `protobuf:"bytes,5,rep,name=replicas" json:"replicas"`
}

func (m *ConsumerState_Shard) Reset()                    { *m = ConsumerState_Shard{} }
func (m *ConsumerState_Shard) String() string            { return proto.CompactTextString(m) }
func (*ConsumerState_Shard) ProtoMessage()               {}
func (*ConsumerState_Shard) Descriptor() ([]byte, []int) { return fileDescriptorService, []int{1, 1} }

func (m *ConsumerState_Shard) GetId() ShardID {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ConsumerState_Shard) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ConsumerState_Shard) GetPartition() github_com_LiveRamp_gazette_pkg_journal.Name {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *ConsumerState_Shard) GetReplicas() []ConsumerState_Replica {
	if m != nil {
		return m.Replicas
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "consumer.Empty")
	proto.RegisterType((*ConsumerState)(nil), "consumer.ConsumerState")
	proto.RegisterType((*ConsumerState_Replica)(nil), "consumer.ConsumerState.Replica")
	proto.RegisterType((*ConsumerState_Shard)(nil), "consumer.ConsumerState.Shard")
	proto.RegisterEnum("consumer.ConsumerState_Replica_Status", ConsumerState_Replica_Status_name, ConsumerState_Replica_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Consumer service

type ConsumerClient interface {
	// CurrentConsumerState returns a snapshot of the current ConsumerState.
	CurrentConsumerState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConsumerState, error)
}

type consumerClient struct {
	cc *grpc.ClientConn
}

func NewConsumerClient(cc *grpc.ClientConn) ConsumerClient {
	return &consumerClient{cc}
}

func (c *consumerClient) CurrentConsumerState(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConsumerState, error) {
	out := new(ConsumerState)
	err := grpc.Invoke(ctx, "/consumer.Consumer/CurrentConsumerState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Consumer service

type ConsumerServer interface {
	// CurrentConsumerState returns a snapshot of the current ConsumerState.
	CurrentConsumerState(context.Context, *Empty) (*ConsumerState, error)
}

func RegisterConsumerServer(s *grpc.Server, srv ConsumerServer) {
	s.RegisterService(&_Consumer_serviceDesc, srv)
}

func _Consumer_CurrentConsumerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServer).CurrentConsumerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consumer.Consumer/CurrentConsumerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServer).CurrentConsumerState(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Consumer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consumer.Consumer",
	HandlerType: (*ConsumerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentConsumerState",
			Handler:    _Consumer_CurrentConsumerState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ConsumerState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Root) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	if len(m.LocalRouteKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.LocalRouteKey)))
		i += copy(dAtA[i:], m.LocalRouteKey)
	}
	if m.ReplicaCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintService(dAtA, i, uint64(m.ReplicaCount))
	}
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Shards) > 0 {
		for _, msg := range m.Shards {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ConsumerState_Replica) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerState_Replica) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Endpoint) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Endpoint)))
		i += copy(dAtA[i:], m.Endpoint)
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintService(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *ConsumerState_Shard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsumerState_Shard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Topic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Topic)))
		i += copy(dAtA[i:], m.Topic)
	}
	if len(m.Partition) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintService(dAtA, i, uint64(len(m.Partition)))
		i += copy(dAtA[i:], m.Partition)
	}
	if len(m.Replicas) > 0 {
		for _, msg := range m.Replicas {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintService(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintService(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ConsumerState) Size() (n int) {
	var l int
	_ = l
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.LocalRouteKey)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.ReplicaCount != 0 {
		n += 1 + sovService(uint64(m.ReplicaCount))
	}
	if len(m.Endpoints) > 0 {
		for _, s := range m.Endpoints {
			l = len(s)
			n += 1 + l + sovService(uint64(l))
		}
	}
	if len(m.Shards) > 0 {
		for _, e := range m.Shards {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func (m *ConsumerState_Replica) Size() (n int) {
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovService(uint64(m.Status))
	}
	return n
}

func (m *ConsumerState_Shard) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	l = len(m.Partition)
	if l > 0 {
		n += 1 + l + sovService(uint64(l))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovService(uint64(l))
		}
	}
	return n
}

func sovService(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozService(x uint64) (n int) {
	return sovService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsumerState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsumerState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalRouteKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalRouteKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaCount", wireType)
			}
			m.ReplicaCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shards = append(m.Shards, ConsumerState_Shard{})
			if err := m.Shards[len(m.Shards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerState_Replica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ConsumerState_Replica_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsumerState_Shard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Shard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Shard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = ShardID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partition = github_com_LiveRamp_gazette_pkg_journal.Name(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthService
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, ConsumerState_Replica{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowService   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("service.proto", fileDescriptorService) }

var fileDescriptorService = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0x8d, 0x6c, 0xcb, 0xb6, 0xae, 0xe3, 0xc4, 0x0c, 0x81, 0x4f, 0xe8, 0x6b, 0x6d, 0xe3, 0x42,
	0xf0, 0xa2, 0x95, 0x8a, 0xbb, 0x2c, 0x2d, 0xf5, 0x1f, 0x45, 0xd4, 0x75, 0xcb, 0x18, 0x02, 0x59,
	0x99, 0xb1, 0x3c, 0x55, 0xa6, 0xb1, 0x34, 0x62, 0x34, 0x0a, 0xb8, 0xcf, 0xd3, 0x27, 0xe9, 0x2a,
	0x9b, 0x42, 0x9f, 0xc0, 0x14, 0x3f, 0x46, 0x56, 0xc5, 0xa3, 0x71, 0xdc, 0x2c, 0x42, 0x77, 0x73,
	0x8f, 0xce, 0x3d, 0xf7, 0xde, 0xa3, 0x03, 0xf5, 0x94, 0x8a, 0x1b, 0x16, 0x50, 0x37, 0x11, 0x5c,
	0x72, 0x54, 0x0d, 0x78, 0x9c, 0x66, 0x11, 0x15, 0xce, 0x8b, 0x90, 0xc9, 0xab, 0x6c, 0xe1, 0x06,
	0x3c, 0xf2, 0x42, 0x1e, 0x72, 0x4f, 0x11, 0x16, 0xd9, 0x17, 0x55, 0xa9, 0x42, 0xbd, 0xf2, 0xc6,
	0x4e, 0x05, 0xcc, 0x71, 0x94, 0xc8, 0x75, 0xe7, 0x47, 0x09, 0xea, 0x43, 0x2d, 0x32, 0x93, 0x44,
	0x52, 0x84, 0xa0, 0x24, 0x38, 0x97, 0xb6, 0xd1, 0x36, 0xba, 0x16, 0x56, 0x6f, 0x74, 0x0e, 0xa7,
	0x2b, 0x1e, 0x90, 0xd5, 0x5c, 0xf0, 0x4c, 0xd2, 0xf9, 0x35, 0x5d, 0xdb, 0x05, 0xf5, 0xb9, 0xae,
	0x60, 0xbc, 0x43, 0x3f, 0xd0, 0x35, 0x7a, 0x06, 0x75, 0x41, 0x93, 0x15, 0x0b, 0xc8, 0x3c, 0xe0,
	0x59, 0x2c, 0xed, 0x62, 0xdb, 0xe8, 0x9a, 0xf8, 0x58, 0x83, 0xc3, 0x1d, 0x86, 0x9e, 0x80, 0x45,
	0xe3, 0x65, 0xc2, 0x59, 0x2c, 0x53, 0xbb, 0xd4, 0x2e, 0x76, 0x2d, 0x7c, 0x00, 0xd0, 0x6b, 0x28,
	0xa7, 0x57, 0x44, 0x2c, 0x53, 0xdb, 0x6c, 0x17, 0xbb, 0xb5, 0xde, 0x53, 0x77, 0x7f, 0xa3, 0xfb,
	0x60, 0x4f, 0x77, 0xb6, 0x63, 0x0d, 0x4a, 0xb7, 0x9b, 0xd6, 0x11, 0xd6, 0x2d, 0xce, 0x77, 0x03,
	0x2a, 0x38, 0x9f, 0x85, 0x1c, 0xa8, 0xee, 0x55, 0xf5, 0x2d, 0xf7, 0x35, 0x7a, 0x0b, 0xe5, 0x54,
	0x12, 0x99, 0xa5, 0xea, 0x8c, 0x93, 0xde, 0xf9, 0x63, 0x43, 0xb4, 0x98, 0x3b, 0x53, 0x6c, 0xac,
	0xbb, 0x3a, 0x6f, 0xa0, 0x9c, 0x23, 0xa8, 0x06, 0x15, 0x7f, 0x7a, 0xd1, 0x9f, 0xf8, 0xa3, 0xc6,
	0x11, 0x3a, 0x01, 0xc0, 0xe3, 0xe1, 0xa7, 0x8b, 0x31, 0xf6, 0xa7, 0xef, 0x1b, 0x06, 0xb2, 0xc0,
	0xc4, 0xe3, 0xfe, 0xe8, 0xb2, 0x51, 0xd8, 0xf1, 0x3e, 0x63, 0xff, 0x63, 0x1f, 0x5f, 0x36, 0x8a,
	0xce, 0x4f, 0x03, 0x4c, 0xb5, 0x3e, 0xfa, 0x1f, 0x0a, 0x6c, 0x99, 0xaf, 0x37, 0xa8, 0xdd, 0x6d,
	0x5a, 0x15, 0x05, 0xfb, 0x23, 0x5c, 0x60, 0x4b, 0x74, 0x06, 0xa6, 0xe4, 0x09, 0x0b, 0xb4, 0xd7,
	0x79, 0x81, 0xa6, 0x60, 0x25, 0x44, 0x48, 0x26, 0x19, 0x8f, 0x95, 0xbf, 0xd6, 0xe0, 0xe5, 0xdd,
	0xa6, 0xf5, 0xfc, 0xaf, 0x00, 0x4c, 0xd8, 0x0d, 0xc5, 0x24, 0x4a, 0xbc, 0x90, 0x7c, 0xa3, 0x52,
	0x52, 0x2f, 0xb9, 0x0e, 0xbd, 0xaf, 0x3c, 0x13, 0x31, 0x59, 0xb9, 0x53, 0x12, 0x51, 0x7c, 0x90,
	0x40, 0x7d, 0xa8, 0xea, 0xdf, 0xb3, 0xb7, 0xbc, 0xf5, 0x0f, 0x37, 0xb4, 0xe9, 0xf7, 0x6d, 0xbd,
	0x09, 0x54, 0xf7, 0x44, 0xf4, 0x0e, 0xce, 0x86, 0x99, 0x10, 0x34, 0x96, 0x0f, 0x63, 0x75, 0x7a,
	0x10, 0x55, 0xc9, 0x73, 0xfe, 0x7b, 0x64, 0xca, 0xe0, 0xf8, 0x76, 0xdb, 0x34, 0x7e, 0x6d, 0x9b,
	0xc6, 0xef, 0x6d, 0xd3, 0x58, 0x94, 0x55, 0x60, 0x5f, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0x14, 0xb2, 0xcb, 0xfa, 0x02, 0x00, 0x00,
}
