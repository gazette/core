syntax = "proto3";

package consumer;

import "broker/protocol/protocol.proto";
import "consumer/recoverylog/recorded_op.proto";
import "ptypes/duration/duration.proto";
import "gogoproto/gogo.proto";

option go_package = "go.gazette.dev/core/consumer/protocol";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Status is a response status code, used across Gazette Consumer RPC APIs.
enum Status {
  OK = 0;
  // The named shard does not exist.
  SHARD_NOT_FOUND = 1;
  // There is no current primary consumer process for the shard. This is a
  // temporary condition which should quickly resolve, assuming sufficient
  // consumer capacity.
  NO_SHARD_PRIMARY = 2;
  // The present consumer process is not the assigned primary for the shard,
  // and was not instructed to proxy the request.
  NOT_SHARD_PRIMARY = 3;
  // The Etcd transaction failed. Returned by Update RPC when an
  // expect_mod_revision of the UpdateRequest differs from the current
  // ModRevision of the ShardSpec within the store.
  ETCD_TRANSACTION_FAILED = 4;
}

// ShardSpec describes a shard and its configuration, and is the long-lived unit
// of work and scaling for a consumer application. Each shard is allocated to a
// one "primary" at-a-time selected from the current processes of a consumer
// application, and is re-assigned on process fault or exit.
//
// ShardSpecs describe all configuration of the shard and its processing,
// including journals to consume, configuration for processing transactions, its
// recovery log, hot standbys, etc. ShardSpecs may be further extended with
// domain-specific labels & values to further define application behavior.
// ShardSpec is-a allocator.ItemValue.
message ShardSpec {
  // ID of the shard.
  string id = 1 [
    (gogoproto.casttype) = "ShardID",
    (gogoproto.moretags) = "yaml:\",omitempty\""
  ];

  // Sources define the set of journals which this shard consumes. At least one
  // Source must be specified, and in many use cases only one will be needed.
  // For use cases which can benefit, multiple sources may be specified to
  // represent a "join" over messages of distinct journals.
  //
  // Note the effective mapping of messages to each of the joined journals
  // should align (eg, joining a journal of customer updates with one of orders,
  // where both are mapped on customer ID). This typically means the
  // partitioning of the two event "topics" must be the same.
  //
  // Another powerful pattern is to shard on partitions of a high-volume event
  // stream, and also have each shard join against all events of a low-volume
  // stream. For example, a shard might ingest and index "viewed product"
  // events, read a comparably low-volume "purchase" event stream, and on each
  // purchase publish the bundle of its corresponding prior product views.
  message Source {
    // Journal which this shard is consuming.
    string journal = 1 [ (gogoproto.casttype) =
                             "go.gazette.dev/core/broker/protocol.Journal" ];
    // Minimum journal byte offset the shard should begin reading from.
    // Typically this should be zero, as read offsets are check-pointed and
    // restored from the shard's Store as it processes. |min_offset| can be
    // useful for shard initialization, directing it to skip over historical
    // portions of the journal not needed for the application's use case.
    int64 min_offset = 3 [
      (gogoproto.moretags) = "yaml:\"min_offset,omitempty\"",
      (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset"
    ];
  }
  // Sources of the shard, uniquely ordered on Source journal.
  repeated Source sources = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\",omitempty\""
  ];

  // Prefix of the Journal into which the shard's recovery log will be recorded.
  // The complete Journal name is built as "{recovery_log_prefix}/{shard_id}".
  // If empty, the shard does not use a recovery log.
  string recovery_log_prefix = 3
      [ (gogoproto.moretags) = "yaml:\"recovery_log_prefix,omitempty\"" ];

  // Prefix of Etcd keys into which recovery log FSMHints are written to and
  // read from. FSMHints allow readers of the recovery log to efficiently
  // determine the minimum fragments of log which must be read to fully recover
  // local store state. The complete hint key written by the shard primary is:
  //
  //   "{hint_prefix}/{shard_id}.primary"
  //
  // The primary will regularly produce updated hints into this key, and
  // players of the log will similarly utilize hints from this key.
  // If |recovery_log_prefix| is set, |hint_prefix| must be also.
  string hint_prefix = 4
      [ (gogoproto.moretags) = "yaml:\"hint_prefix,omitempty\"" ];

  // Backups of verified recovery log FSMHints, retained as a disaster-recovery
  // mechanism. On completing playback, a player will write recovered hints to:
  //
  //   "{hints_prefix}/{shard_id}.backup.0".
  //
  // It also move hints previously stored under
  // "{hints_prefix/{shard_id}.backup.0" to
  // "{hints_prefix/{shard_id}.backup.1", and so on, keeping at most
  // |hint_backups| distinct sets of FSMHints.
  //
  // In the case of disaster or data-loss, these copied hints can be an
  // important fallback for recovering a consistent albeit older version of the
  // shard's store, with each relying on only progressively older portions of
  // the recovery log.
  //
  // When pruning the recovery log, log fragments which are older than (and no
  // longer required by) the *oldest* backup are discarded, ensuring that
  // all hints remain valid for playback.
  int32 hint_backups = 5
      [ (gogoproto.moretags) = "yaml:\"hint_backups,omitempty\"" ];

  // Max duration of shard transactions. This duration upper-bounds the amount
  // of time during which a transaction may process messages before it must
  // flush and commit. It may run for less time if an input message stall occurs
  // (eg, no decoded journal message is ready without blocking). A typical value
  // would be `1s`: applications which perform extensive aggregation over
  // message streams exhibiting locality of "hot" keys may benefit from larger
  // values.
  google.protobuf.Duration max_txn_duration = 6 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"max_txn_duration,omitempty\""
  ];
  // Min duration of shard transactions. This duration lower-bounds the amount
  // of time during which a transaction must process messages before it may
  // flush and commit. It may run for more time if additional messages are
  // available (eg, decoded journal messages are ready without blocking). Note
  // also that transactions are pipelined: a current transaction may process
  // messages while a prior transaction's recovery log writes flush to Gazette,
  // but it cannot prepare to commit until the prior transaction writes
  // complete. In other words even if |min_txn_quantum| is zero, some degree of
  // message batching is expected due to the network delay inherent in Gazette
  // writes. A typical value of would be `0s`: applications which perform
  // extensive aggregation may benefit from larger values.
  google.protobuf.Duration min_txn_duration = 7 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"min_txn_duration,omitempty\""
  ];

  // Disable processing of the shard.
  bool disable = 8 [ (gogoproto.moretags) = "yaml:\",omitempty\"" ];

  // Hot standbys is the desired number of consumer processes which should be
  // replicating the primary consumer's recovery log. Standbys are allocated in
  // a separate availability zone of the current primary, and tail the live log
  // to continuously mirror the primary's on-disk DB file structure. Should the
  // primary experience failure, one of the hot standbys will be assigned to
  // take over as the new shard primary, which is accomplished by simply opening
  // its local copy of the recovered store files.
  //
  // Note that under regular operation, shard hand-off is zero downtime even if
  // standbys are zero, as the current primary will not cede ownership until the
  // replacement process declares itself ready. However, without standbys a
  // process failure will leave the shard without an active primary while its
  // replacement starts and completes playback of its recovery log.
  uint32 hot_standbys = 9
      [ (gogoproto.moretags) = "yaml:\"hot_standbys,omitempty\"" ];

  // User-defined Labels of this ShardSpec. The label "id" is reserved and may
  // not be used with a ShardSpec's labels.
  protocol.LabelSet labels = 10 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\",omitempty,inline\""
  ];

  // Disable waiting for acknowledgements of pending message(s).
  //
  // If a consumer transaction reads uncommitted messages, it will by default
  // remain open (subject to the max duration) awaiting an acknowledgement of
  // those messages, in the hope that that acknowledgement will be quickly
  // forthcoming and, by remaining open, we can process all messages in this
  // transaction. Effectively we're trading a small amount of increased local
  // latency for a global reduction in end-to-end latency.
  //
  // This works well for acyclic message flows, but can introduce unnecessary
  // stalls if there are message cycles between shards. In the simplest case,
  // a transaction could block awaiting an ACK of a message that it itself
  // produced -- an ACK which can't arrive until the transaction closes.
  bool disable_wait_for_ack = 11
      [ (gogoproto.moretags) = "yaml:\"disable_wait_for_ack,omitempty\"" ];
}

// ConsumerSpec describes a Consumer process instance and its configuration.
// It serves as a allocator MemberValue.
message ConsumerSpec {
  // ProcessSpec of the consumer.
  protocol.ProcessSpec process_spec = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\",inline\""
  ];
  // Maximum number of assigned Shards.
  uint32 shard_limit = 2;
}

// ReplicaStatus is the status of a ShardSpec assigned to a ConsumerSpec.
// It serves as an allocator AssignmentValue. ReplicaStatus is reduced by taking
// the maximum enum value among statuses. Eg, if a primary is PRIMARY, one
// replica is BACKFILL and the other STANDBY, then the status is PRIMARY. If one
// of the replicas transitioned to FAILED, than the status is FAILED. This
// reduction behavior is used to summarize status across all replicas.
message ReplicaStatus {
  enum Code {
    IDLE = 0;
    // The replica is actively playing the historical recovery log.
    BACKFILL = 100;
    // The replica has finished playing the historical recovery log and is
    // live-tailing it to locally mirror recorded operations as they are
    // produced. It can take over as primary at any time.
    //
    // Shards not having recovery logs immediately transition to STANDBY.
    STANDBY = 200;
    // The replica is actively serving as primary.
    PRIMARY = 300;
    // The replica has encountered an unrecoverable error.
    FAILED = 400;
  };
  Code code = 1;

  // Errors encountered during replica processing. Set iff |code| is FAILED.
  repeated string errors = 2;
}

// Checkpoint is processing metadata of a consumer shard which allows for its
// recovery on fault.
message Checkpoint {
  // Source is metadata of a consumed source journal.
  message Source {
    // Offset of the journal which has been read-through.
    int64 read_through = 1
        [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset" ];
    // States of journal producers. Producer keys are 6-byte,
    // RFC 4122 v1 node identifiers (see message.ProducerID).
    message ProducerEntry {
      bytes id = 1;
      ProducerState state = 2 [ (gogoproto.nullable) = false ];
    }
    repeated ProducerEntry producers = 2 [ (gogoproto.nullable) = false ];
  }
  // ProducerState is metadata of a producer as-of a read-through journal
  // offset.
  message ProducerState {
    // LastAck is the last acknowledged Clock of this producer.
    fixed64 last_ack = 1
        [ (gogoproto.casttype) = "go.gazette.dev/core/message.Clock" ];
    // Begin is the offset of the first message byte having CONTINUE_TXN that's
    // larger than LastAck. Eg, it's the offset which opens the next
    // transaction. If there is no such message, Begin is -1.
    int64 begin = 2
        [ (gogoproto.casttype) = "go.gazette.dev/core/broker/protocol.Offset" ];
  }

  // Sources is metadata of journals consumed by the shard.
  map<string, Source> sources = 1
      [ (gogoproto.castkey) = "go.gazette.dev/core/broker/protocol.Journal" ];

  // AckIntents is acknowledgement intents to be written to journals to which
  // uncommitted messages were published during the transaction which produced
  // this Checkpoint.
  map<string, bytes> ack_intents = 2
      [ (gogoproto.castkey) = "go.gazette.dev/core/broker/protocol.Journal" ];
}

message ListRequest {
  // Selector optionally refines the set of shards which will be enumerated.
  // If zero-valued, all shards are returned. Otherwise, only ShardSpecs
  // matching the LabelSelector will be returned. One meta-label "id" is
  // additionally supported by the selector, where "id=example-shard-ID"
  // will match a ShardSpec with ID "example-shard-ID".
  protocol.LabelSelector selector = 1 [ (gogoproto.nullable) = false ];
  // Optional extension of the ListRequest.
  bytes extension = 100;
}

message ListResponse {
  // Status of the List RPC.
  Status status = 1;
  // Header of the response.
  protocol.Header header = 2 [ (gogoproto.nullable) = false ];
  // Shards of the response.
  message Shard {
    ShardSpec spec = 1 [ (gogoproto.nullable) = false ];
    // Current ModRevision of the ShardSpec.
    int64 mod_revision = 2;
    // Route of the shard, including endpoints.
    protocol.Route route = 3 [ (gogoproto.nullable) = false ];
    // Status of each replica. Cardinality and ordering matches |route|.
    repeated ReplicaStatus status = 4 [ (gogoproto.nullable) = false ];
  }
  repeated Shard shards = 3 [ (gogoproto.nullable) = false ];
  // Optional extension of the ListResponse.
  bytes extension = 100;
}

message ApplyRequest {
  // Change defines an insertion, update, or deletion to be applied to the set
  // of ShardSpecs. Exactly one of |upsert| or |delete| must be set.
  message Change {
    // Expected ModRevision of the current ShardSpec. If the shard is being
    // created, expect_mod_revision is zero.
    int64 expect_mod_revision = 1;
    // ShardSpec to be updated (if expect_mod_revision > 0) or created
    // (if expect_mod_revision == 0).
    ShardSpec upsert = 2;
    // Shard to be deleted. expect_mod_revision must not be zero.
    string delete = 3 [ (gogoproto.casttype) = "ShardID" ];
  }
  repeated Change changes = 1 [ (gogoproto.nullable) = false ];
  // Optional extension of the ApplyRequest.
  bytes extension = 100;
}

message ApplyResponse {
  // Status of the Apply RPC.
  Status status = 1;
  // Header of the response.
  protocol.Header header = 2 [ (gogoproto.nullable) = false ];
  // Optional extension of the ApplyResponse.
  bytes extension = 100;
}

message StatRequest {
  // Header may be attached by a proxying consumer peer.
  protocol.Header header = 1;
  // Shard to Stat.
  string shard = 2 [ (gogoproto.casttype) = "ShardID" ];
  // Journals and offsets which must be reflected in a completed consumer
  // transaction before Stat returns, blocking if required. Offsets of journals
  // not read by this shard are ignored.
  map<string, int64> read_through = 3 [
    (gogoproto.castkey) = "go.gazette.dev/core/broker/protocol.Journal",
    (gogoproto.castvalue) = "go.gazette.dev/core/broker/protocol.Offset"
  ];
  // Optional extension of the StatRequest.
  bytes extension = 100;
}

message StatResponse {
  // Status of the Stat RPC.
  Status status = 1;
  // Header of the response.
  protocol.Header header = 2 [ (gogoproto.nullable) = false ];
  // Journals and offsets read through by the most recent completed consumer
  // transaction.
  map<string, int64> read_through = 3 [
    (gogoproto.castkey) = "go.gazette.dev/core/broker/protocol.Journal",
    (gogoproto.castvalue) = "go.gazette.dev/core/broker/protocol.Offset"
  ];
  // Journals and offsets this shard has published through, including
  // acknowledgements, as-of the most recent completed consumer transaction.
  //
  // Formally, if an acknowledged message A results in this shard publishing
  // messages B, and A falls within |read_through|, then all messages B & their
  // acknowledgements fall within |publish_at|.
  //
  // The composition of |read_through| and |publish_at| allow CQRS applications
  // to provide read-your-writes consistency, even if written events pass
  // through multiple intermediate consumers and arbitrary transformations
  // before arriving at the materialized view which is ultimately queried.
  map<string, int64> publish_at = 4 [
    (gogoproto.castkey) = "go.gazette.dev/core/broker/protocol.Journal",
    (gogoproto.castvalue) = "go.gazette.dev/core/broker/protocol.Offset"
  ];
  // Optional extension of the StatResponse.
  bytes extension = 100;
}

message GetHintsRequest {
  // Shard to fetch hints for.
  string shard = 1 [ (gogoproto.casttype) = "ShardID" ];
  // Optional extension of the GetHintsRequest.
  bytes extension = 100;
}

message GetHintsResponse {
  // Status of the Hints RPC.
  Status status = 1;
  // Header of the response.
  protocol.Header header = 2 [ (gogoproto.nullable) = false ];

  message ResponseHints {
    // If the hints value does not exist Hints will be nil.
    recoverylog.FSMHints hints = 1;
  }
  // Primary hints for the shard.
  ResponseHints primary_hints = 3 [ (gogoproto.nullable) = false ];
  // List of backup hints for a shard. The most recent recovery log hints will
  // be first, any subsequent hints are for historical backup. If there is no
  // value for a hint key the value corresponding hints will be nil.
  repeated ResponseHints backup_hints = 4 [ (gogoproto.nullable) = false ];
  // Optional extension of the GetHintsResponse.
  bytes extension = 100;
}

// Shard is the Consumer service API for interacting with Shards. Applications
// are able to wrap or alter the behavior of Shard API implementations via the
// Service.ShardAPI structure. They're also able to implement additional gRPC
// service APIs which are registered against the common gRPC server.
service Shard {
  // Stat returns detailed status of a given Shard.
  rpc Stat(StatRequest) returns (StatResponse);
  // List Shards, their ShardSpecs and their processing status.
  rpc List(ListRequest) returns (ListResponse);
  // Apply changes to the collection of Shards managed by the consumer.
  rpc Apply(ApplyRequest) returns (ApplyResponse);
  // GetHints fetches hints for a shard.
  rpc GetHints(GetHintsRequest) returns (GetHintsResponse);
}
