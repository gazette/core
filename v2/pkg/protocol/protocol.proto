syntax = "proto3";

package protocol;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Status is a response status code, used universally across Gazette RPC APIs.
enum Status {
  OK = 0;
  // The named journal does not exist.
  JOURNAL_NOT_FOUND = 1;
  // There is no current primary broker for the journal. This is a temporary
  // condition which should quickly resolve, assuming sufficient broker capacity.
  NO_JOURNAL_PRIMARY_BROKER = 2;
  // The present broker is not the assigned primary broker for the journal.
  NOT_JOURNAL_PRIMARY_BROKER = 3;
  // The present broker is not an assigned broker for the journal.
  NOT_JOURNAL_BROKER = 5;
  // There are an insufficient number of assigned brokers for the journal
  // to meet its required replication.
  INSUFFICIENT_JOURNAL_BROKERS = 4;
  // The requested offset is not yet available. This indicates either that the
  // offset has not yet been written, or that the broker is not yet aware of a
  // written fragment covering the offset. Returned only by non-blocking reads.
  OFFSET_NOT_YET_AVAILABLE = 6;
  // The peer disagrees with the Route accompanying a ReplicateRequest.
  WRONG_ROUTE = 7;
  // The peer disagrees with the Fragment proposal accompanying a ReplicateRequest.
  FRAGMENT_MISMATCH = 8;
  // The Etcd transaction failed. Returned by Update RPC when an
  // expect_mod_revision of the UpdateRequest differs from the current
  // ModRevision of the JournalSpec within the store.
  ETCD_TRANSACTION_FAILED = 9;
}

// CompressionCode defines codecs known to Gazette.
enum CompressionCodec {
  // INVALID is the zero-valued CompressionCodec, and is not a valid codec.
  INVALID = 0;
  // NONE encodes Fragments without any applied compression, with default suffix ".raw".
  NONE = 1;
  // GZIP encodes Fragments using the Gzip library, with default suffix ".gz".
  GZIP = 2;
  // ZSTANDARD encodes Fragments using the ZStandard library, with default suffix ".zst".
  ZSTANDARD = 3;
  // SNAPPY encodes Fragments using the Snappy library, with default suffix ".sz".
  SNAPPY = 4;
  // GZIP_OFFLOAD_DECOMPRESSION is the GZIP codec with additional behavior
  // around reads and writes to remote Fragment stores, designed to offload
  // the work of decompression onto compatible stores. Specifically:
  //  * Fragments are written with a "Content-Encoding: gzip" header.
  //  * Client read requests are made with "Accept-Encoding: identity".
  // This can be helpful in contexts where reader IO bandwidth to the storage
  // API is unconstrained, as the cost of decompression is offloaded to the
  // store and CPU-intensive batch readers may receive a parallelism benefit.
  // While this codec may provide substantial read-time performance improvements,
  // it is an advanced configuration and the "Content-Encoding" header handling
  // can be subtle and sometimes confusing. It uses the default suffix ".gzod".
  GZIP_OFFLOAD_DECOMPRESSION = 5;
}

// Label defines a key & value pair which can be attached to entities like
// JournalSpecs and BrokerSpecs. Labels may be used to provide identifying
// attributes which do not directly imply semantics to the core system, but
// are meaningful to users or for higher-level Gazette tools. For example,
// topics of JournalSpecs are represented as the well-known label "topic".
message Label {
  option (gogoproto.goproto_unrecognized) = false;
  string name = 1;
  string value = 2;
}

// LabelSet is a collection of labels and their values.
message LabelSet {
  // Labels of the set. Instances must be unique and in sorted order.
  repeated Label labels = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\",omitempty\""];
}

// LabelSelector defines a filter over LabelSets.
message LabelSelector {
  // Include is Labels which must be matched for a LabelSet to be selected. If
  // empty, all Labels are included. An include Label with empty ("") value is
  // matched by a Label of the same name having any value.
  LabelSet include = 1 [(gogoproto.nullable) = false];
  // Exclude is Labels which cannot be matched for a LabelSet to be selected. If
  // empty, no Labels are excluded. An exclude Label with empty ("") value
  // excludes a Label of the same name having any value.
  LabelSet exclude = 2 [(gogoproto.nullable) = false];
}

// JournalSpec describes a Journal and its configuration.
message JournalSpec {
  // Name of the Journal.
  string name = 1 [
    (gogoproto.casttype) = "Journal",
    (gogoproto.moretags) = "yaml:\",omitempty\""];

  // Desired replication of this Journal. This defines the Journal's tolerance
  // to broker failures before data loss can occur (eg, a replication factor
  // of three means two failures are tolerated).
  int32 replication = 2 [(gogoproto.moretags) = "yaml:\",omitempty\""];

  // User-defined Labels of this JournalSpec. Two label names are reserved
  // and may not be used within a JournalSpec's Labels: "name" and "prefix".
  LabelSet labels = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\",omitempty,inline\""];

  // Fragment is JournalSpec configuration which pertains to the creation,
  // persistence, and indexing of the Journal's Fragments.
  message Fragment {
    // Target content length of each Fragment. In normal operation after Fragments
    // reach at least this length, they will be closed and new ones begun. Note
    // lengths may be smaller at times (eg, due to changes in Journal routing
    // topology). Content length differs from Fragment file size, in that the
    // former reflects uncompressed bytes.
    int64 length = 1 [(gogoproto.moretags) = "yaml:\",omitempty\""];

    // Codec used to compress Journal Fragments.
    CompressionCodec compression_codec = 2 [
      (gogoproto.moretags) = "yaml:\"compression_codec,omitempty\""];

    // Storage backend base path for this Journal's Fragments. Must be in URL
    // form, with the choice of backend defined by the scheme. The full path of
    // a Journal's Fragment is derived by joining the fragment_store path with
    // the Fragment's ContentPath. Eg, given a fragment_store of
    // "s3://My-AWS-bucket/a/prefix" and a JournalSpec of name "my/journal",
    // a complete Fragment path might be:
    //   "s3://My-AWS-bucket/a/prefix/my/journal/000123-000456-789abcdef.gzip
    //
    // Multiple fragment_stores may be specified, in which case the Journal's
    // Fragments are the union of all Fragments present across all stores, and
    // new Fragments always persist to the first specified store. This can be
    // helpful in performing incremental migrations, where new Journal content is
    // written to the new store, while content in the old store remains available
    // (and, depending on fragment_retention or recovery log pruning, may
    // eventually be removed).
    //
    // If no fragment_stores are specified, the Journal is still useable but will
    // not persist Fragments to any a backing fragment store. This allows for
    // real-time streaming use cases where reads of historical data are not needed.
    repeated string stores = 3 [
      (gogoproto.casttype) = "FragmentStore",
      (gogoproto.moretags) = "yaml:\",omitempty\""];

    // Interval of time between refreshes of remote Fragment listings from
    // configured fragment_stores.
    google.protobuf.Duration refresh_interval = 4 [
      (gogoproto.stdduration) = true,
      (gogoproto.nullable) = false,
      (gogoproto.moretags) = "yaml:\"refresh_interval,omitempty\""];

    // Retention duration for historical Fragments of this Journal within the
    // Fragment stores. If less than or equal to zero, Fragments are retained
    // indefinetely.
    google.protobuf.Duration retention = 5 [
      (gogoproto.stdduration) = true,
      (gogoproto.nullable) = false,
      (gogoproto.moretags) = "yaml:\",omitempty\""];
  }
  Fragment fragment = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\",omitempty\""];

  // Flags define Journal IO control behaviors. Where possible, flags are named
  // after an equivalent POSIX flag.
  enum Flag {
    // NOT_SPECIFIED is considered as equivalent to O_RDWR by the broker. When
    // JournalSpecs are union'ed (eg, by the `journalspace` pkg), NOT_SPECIFIED
    // is considered as unset relative to any other non-zero Flag value.
    NOT_SPECIFIED = 0x00;

    // Only one of O_RDONLY, O_WRONLY, or O_RDWR may be set.

    // The Journal is available for reads (only).
    O_RDONLY = 0x01;
    // The Journal is available for writes (only).
    O_WRONLY = 0x02;
    // The Journal may be used for reads or writes.
    O_RDWR   = 0x04;
  }
  // Flags of the Journal, as a combination of Flag enum values. The Flag enum
  // not used directly, as protobuf enums do not allow for or'ed bitfields.
  uint32 flags = 6 [
    (gogoproto.casttype) = "JournalSpec_Flag",
    (gogoproto.moretags) = "yaml:\",omitempty\""];
}

// ProcessSpec describes a uniquely identified process and its addressable endpoint.
message ProcessSpec {
  // ID composes a zone and a suffix to uniquely identify a ProcessSpec.
  message ID {
    // "Zone" in which the process is running. Zones may be AWS, Azure, or Google
    // Cloud Platform zone identifiers, or rack locations within a colo, or
    // given some other custom meaning. Gazette will replicate across multiple
    // zones, and seeks to minimize traffic which must cross zones (for example,
    // by proxying reads to a broker in the current zone).
    string zone = 1;
    // Unique suffix of the process within |zone|. It is permissible for a
    // suffix value to repeat across zones, but never within zones. In practice,
    // it's recommended to use a FQDN, Kubernetes Pod name, or comparable unique
    // and self-describing value as the ID suffix.
    string suffix = 2;
  }
  ID id = 1 [(gogoproto.nullable) = false];
  // Advertised URL of the process.
  string endpoint = 2 [(gogoproto.casttype) = "Endpoint"];
}


// BrokerSpec describes a Gazette broker and its configuration.
message BrokerSpec {
  // ProcessSpec of the broker.
  ProcessSpec process_spec = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\",inline\""];
  // Maximum number of assigned Journal replicas.
  uint32 journal_limit = 2;
}

// Fragment is a content-addressed description of a contiguous Journal span,
// defined by the [begin, end) offset range covered by the Fragment and the
// SHA1 sum of the corresponding Journal content.
message Fragment {
  // Journal of the Fragment.
  string journal = 1 [(gogoproto.casttype) = "Journal"];
  // Begin (inclusive) and end (exclusive) offset of the Fragment within the Journal.
  int64 begin = 2;
  int64 end = 3;
  // SHA1 sum of the Fragment's content.
  SHA1Sum sum = 4 [(gogoproto.nullable) = false];
  // Codec with which the Fragment's content is compressed.
  CompressionCodec compression_codec = 5;
  // Fragment store which backs the Fragment. Empty if the Fragment has yet to
  // be persisted and is still local to a Broker.
  string backing_store = 6 [(gogoproto.casttype) = "FragmentStore"];
  // Modification timestamp of the Fragment within the backing store.
  google.protobuf.Timestamp mod_time = 7 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
}

// SHA1Sum is a 160-bit SHA1 digest.
message SHA1Sum {
  option (gogoproto.goproto_unrecognized) = false;
  option (gogoproto.equal) = true;

  fixed64 part1 = 1;
  fixed64 part2 = 2;
  fixed32 part3 = 3;
}

message ReadRequest {
  // Header is attached by a proxying broker peer.
  Header header = 1;
  // Journal to be read.
  string journal = 2 [(gogoproto.casttype) = "Journal"];
  // Desired offset to begin reading from. Value -1 has special handling, where
  // the read is performed from the current write head. All other positive
  // values specify a desired exact byte offset to read from. If the offset is
  // not available (eg, because it represents a portion of Journal which has
  // been permanently deleted), the broker will return the next available
  // offset. Callers should therefore always inspect the ReadResponse offset.
  int64 offset = 3;
  // Whether the operation should block until content becomes available.
  // OFFSET_NOT_YET_AVAILABLE is returned if a non-blocking read has no ready content.
  bool block = 4;
  // If do_not_proxy is true, the broker will not proxy the read to another
  // broker, or open and proxy a remote Fragment on the client's behalf.
  bool do_not_proxy = 5;
  // If metadata_only is true, the broker will respond with Journal and
  // Fragment metadata but not content.
  bool metadata_only = 6;
}

message ReadResponse {
  // Status of the Read RPC.
  Status status = 1;
  // Header of the response. Accompanies the first ReadResponse in the response stream.
  Header header = 2;
  // The effective offset of the read. See ReadRequest offset.
  int64 offset = 3;
  // The offset to next be written, by the next append transaction served by
  // broker. In other words, the last offset through which content is
  // available to be read from the Journal.
  int64 write_head = 4;
  // Fragment to which the offset was mapped.
  Fragment fragment = 5;
  // If Fragment is remote, a URL from which it may be directly read.
  string fragment_url = 6;
  // Content chunks of the read.
  bytes content = 7;
}

message AppendRequest {
  // Header is attached by a proxying broker peer to the first AppendRequest message.
  Header header = 1;
  // Journal to be appended to.
  string journal = 2 [(gogoproto.casttype) = "Journal"];
  // If do_not_proxy is true, the broker will not proxy the append if it is
  // not the current primary.
  bool do_not_proxy = 3;
  // Content chunks to be appended. Immediately prior to closing the stream,
  // the client must send an empty chunk (eg, zero-valued AppendRequest) to
  // indicate the Append should be committed. Absence of this empty chunk
  // prior to EOF is interpreted by the broker as a rollback of the Append.
  bytes content = 4;
}

message AppendResponse {
  // Status of the Append RPC.
  Status status = 1;
  // Header of the response.
  Header header = 2;
  // If status is OK, then |commit| is the Fragment which places the
  // committed Append content within the Journal.
  Fragment commit = 3;
}

message ReplicateRequest {
  // Header defines the primary broker, Route, and Etcd Revision under which
  // this Replicate stream is being established. Each replication peer
  // independently inspects and verifies the current Journal Route topology.
  Header header = 1;
  // Journal to be replicated to.
  string journal = 2 [(gogoproto.casttype) = "Journal"];
  // Proposed Fragment to commit. Also verified by each replica.
  Fragment proposal = 3;
  // Content to be replicated.
  bytes content = 4;
  // Delta offset of |content| relative to current Fragment |end|.
  int64 content_delta = 5;
  // Acknowledge requests that the peer send an acknowledging ReplicateResponse
  // on successful application of the ReplicateRequest.
  bool acknowledge = 6;
}

message ReplicateResponse {
  // Status of the Replicate RPC.
  Status status = 1;
  // Header of the response.
  Header header = 2;
  // If status is FRAGMENT_MISMATCH, then |fragment| is the replica's
  // Fragment at the current Journal head, which was found to be inconsistent
  // with the request |proposal| Fragment.
  Fragment fragment = 3;
}

message ListRequest {
  // Selector optionally refines the set of journals which will be enumerated.
  // If zero-valued, all journals are returned. Otherwise, only JournalSpecs
  // matching the LabelSelector will be returned. Two meta-labels "name" and
  // "prefix" are additionally supported by the selector, where:
  //   * name=examples/a-name will match a JournalSpec with Name "examples/a-name"
  //   * prefix=examples/ will match any JournalSpec having prefix "examples/".
  //     The prefix Label value must end in '/'.
  LabelSelector selector = 1 [(gogoproto.nullable) = false];
  // Maximum number of journals to return in a ListResponse.
  // This field is optional, and the broker may enforce its own limit.
  uint32 page_limit = 2;
  // A pagination token returned by a previous call to List, that indicates
  // where this request should continue from. Optional.
  string page_token = 3;
}

message ListResponse {
  // Status of the List RPC.
  Status status = 1;
  // Header of the response.
  Header header = 2 [(gogoproto.nullable) = false];
  // Journals of the response.
  message Journal {
    JournalSpec spec = 1 [(gogoproto.nullable) = false];
    // Current ModRevision of the JournalSpec.
    int64 mod_revision = 2;
    // Route of the journal, including endpoints.
    Route route = 3 [(gogoproto.nullable) = false];
  }
  repeated Journal journals = 3 [(gogoproto.nullable) = false];
  // A pagination token which indicates where the next request should continue
  // from. Empty if and only if this ListResponse completes the listing.
  string next_page_token = 4;
}

message UpdateRequest {
  // Update defines an insertion, update, or deletion to be applied to the set
  // of JournalSpecs. Exactly one of |upsert| or |delete| must be set.
  message Update {
    // Expected ModRevision of the current JournalSpec. If the Journal is being
    // created, expect_mod_revision is zero.
    int64 expect_mod_revision = 1;
    // JournalSpec to be updated (if expect_mod_revision > 0) or created
    // (if expect_mod_revision == 0).
    JournalSpec upsert = 2;
    // Journal to be deleted. expect_mod_revision must not be zero.
    string delete = 3 [(gogoproto.casttype) = "Journal"];
  }
  repeated Update updates = 1 [(gogoproto.nullable) = false];
}

message UpdateResponse {
  // Status of the Update RPC.
  Status status = 1;
  // Header of the response.
  Header header = 2 [(gogoproto.nullable) = false];
}

// Route captures the current topology of an item and the processes serving it.
message Route {
  option (gogoproto.goproto_unrecognized) = false;

  // Members of the Route, ordered on ascending ProcessSpec.ID (zone, suffix).
  repeated ProcessSpec.ID members = 1 [(gogoproto.nullable) = false];
  // Index of the ProcessSpec serving as primary within |members|,
  // or -1 of no member is currently primary.
  int32 primary = 2;
  // Endpoints of each Route member. If not empty, |endpoints| has the same
  // length and order as |members|, and captures the endpoint of each one.
  repeated string endpoints = 3 [(gogoproto.casttype) = "Endpoint"];
}

// Header captures metadata such as the process responsible for processing
// an RPC, and its effective Etcd state.
message Header {
  // ID of the process responsible for request processing.
  ProcessSpec.ID process_id = 1 [(gogoproto.nullable) = false];
  // Route of processes specifically responsible for this RPC, or an empty Route
  // if any process is capable of serving the RPC.
  Route route = 2 [(gogoproto.nullable) = false];
  // Etcd represents the effective Etcd MVCC state under which a Gazette broker
  // is operating in its processing of requests and responses. Its inclusion
  // allows brokers to reason about relative "happened before" Revision ordering
  // of apparent routing conflicts in proxied or replicated requests, as well
  // as enabling sanity checks over equality of Etcd ClusterId (and precluding,
  // for example, split-brain scenarios where different brokers are backed by
  // different Etcd clusters). Etcd is kept in sync with etcdserverpb.ResponseHeader.
  message Etcd {
    // cluster_id is the ID of the cluster.
    uint64 cluster_id = 1;
    // member_id is the ID of the member.
    uint64 member_id = 2;
    // revision is the Etcd key-value store revision when the request was applied.
    int64 revision = 3;
    // raft_term is the raft term when the request was applied.
    uint64 raft_term = 4;
  }
  Etcd etcd = 3 [(gogoproto.nullable) = false];
}

// Broker is the Gazette broker service API.
// It provides capabilities for enumerating, updating, reading, appending to,
// and replicating Gazette journals.
// TODO(johnny): Rename this Broker => Journal as a separate patch-set.
service Broker {
  rpc Read(ReadRequest) returns (stream ReadResponse);
  rpc Append(stream AppendRequest) returns (AppendResponse);
  rpc Replicate(stream ReplicateRequest) returns (stream ReplicateResponse);
  rpc List(ListRequest) returns (ListResponse);
  rpc Update(UpdateRequest) returns (UpdateResponse);
}
