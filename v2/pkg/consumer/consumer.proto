syntax = "proto3";

package consumer;

import "github.com/LiveRamp/gazette/v2/pkg/protocol/protocol.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Status is a response status code, used across Gazette Consumer RPC APIs.
enum Status {
  OK = 0;
  // The named shard does not exist.
  SHARD_NOT_FOUND = 1;
  // There is no current primary consumer process for the shard. This is a
  // temporary condition which should quickly resolve, assuming sufficient
  // consumer capacity.
  NO_SHARD_PRIMARY = 2;
  // The present consumer process is not the assigned primary for the shard,
  // and was not instructed to proxy the request.
  NOT_SHARD_PRIMARY = 3;
  // The Etcd transaction failed. Returned by Update RPC when an
  // expect_mod_revision of the UpdateRequest differs from the current
  // ModRevision of the ShardSpec within the store.
  ETCD_TRANSACTION_FAILED = 4;
}

// ShardSpec describes a shard and its configuration. Shards represent the
// combination of a consumer application, a specific journal selected for
// consumption, and a recoverylog journal which replicates the stateful
// consumption of that journal by the consumer. ShardSpec serves as a
// allocator ItemValue.
message ShardSpec {
  // ID of the Shard.
  string id = 1 [(gogoproto.casttype) = "ShardID"];

  // Sources define the set of Journals which this Shard consumes.
  // At least one Source must be specified, and in many use cases only one will
  // be needed. For advanced use cases which can benefit, multiple sources may
  // be specified to represent a "join" over messages of distinct journals. Note
  // the effective mapping of messages to each of the joined journals should
  // align (eg, joining a journal of customer updates with one of orders, where
  // both are mapped on customer ID). Another powerful pattern is to join each
  // partition of a high-volume event stream with a low-volume journal of
  // queries, obtaining a reliable distributed scatter/gather query engine.
  message Source {
    // Journal which this Shard is consuming.
    string journal = 1 [(gogoproto.casttype) = "github.com/LiveRamp/gazette/v2/pkg/protocol.Journal"];
    // Minimum journal byte offset the shard should begin reading from. Typically
    // this should be zero, as read offsets are persisted to and recovered from
    // the shard store as the journal is processed. |min_offset| can be useful
    // for shard initialization, directing it to skip over undesired historical
    // sections of the journal.
    int64 min_offset = 3 [(gogoproto.moretags) = "yaml:\"min_offset,omitempty\""];
  }
  // Sources of the shard, uniquely ordered on Source journal.
  repeated Source sources = 2 [(gogoproto.nullable) = false];

  // Recovery log into which the Shard's database is replicated.
  string recovery_log = 3 [
    (gogoproto.casttype) = "github.com/LiveRamp/gazette/v2/pkg/protocol.Journal",
    (gogoproto.moretags) = "yaml:\"recovery_log\""];

  // Etcd keys into which recoverylog.FSMHints are written to and read from.
  // FSMHints allow readers of the recoverylog to efficiently determine the
  // minimum fragments of log which must be read to fully recover database state.
  // The current primary will regularly produce updated hints into hint_keys[0].
  // New players of the log will similarly utilize hints from hint_keys[0].
  // At least one |hint_keys| must be provided.
  //
  // Additional hint_keys beyond the first are a disaster-recovery mechanism:
  // On completing playback, a player will write the hints it recovered to
  // hint_keys[1], shifting the prior value of hint_keys[1] => hint_keys[2],
  // and so on for as many |hint_keys| as are specified. In the case of disaster
  // data-loss, these copied hints can be a helpful fallback for recovering a
  // consistent albiet older version of the Shard database, relying on only
  // progressively older portions of the recoverylog.
  //
  // When pruning the recoverylog, log fragments which are older than and no
  // longer required by the *last* of |hint_keys| are discarded, ensuring that
  // all of |hint_keys| remain valid for playback.
  repeated string hint_keys = 4 [(gogoproto.moretags) = "yaml:\"hint_keys\""];

  // Max duration of shard transactions. This duration upper-bounds the amount
  // of time during which a transaction may process messages before it must flush
  // and commit. It may run for less time if an input message stall occurs (eg,
  // no decoded journal message is ready without blocking). A typical value
  // would be `1s`: applications which perform extensive aggregation over message
  // streams exhibiting locality of "hot" keys may benefit from larger values.
  google.protobuf.Duration max_txn_duration = 5 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"max_txn_duration,omitempty\""];
  // Min duration of shard transactions. This duration lower-bounds the amount
  // of time during which a transaction must process messages before it may flush
  // and commit. It may run for more time if additional messages are available
  // (eg, decoded journal messages are ready without blocking). Note also that
  // transactions are pipelined: a current transaction may process messages while
  // a prior transaction's recoverylog writes flush to Gazette, but it cannot
  // begin to commit until the prior transaction writes complete. In other words
  // even if |min_txn_quantum| is zero, some degree of message batching is
  // expected due to the network delay inherent in Gazette writes. A typical
  // value of would be `0s`: applications which perform extensive aggregation
  // may benefit from larger values.
  google.protobuf.Duration min_txn_duration = 6 [
    (gogoproto.stdduration) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"min_txn_duration,omitempty\""];

  // Disable processing of the Shard.
  bool disable = 7;
  // Hot standbys is the desired number of consumer processes which should be
  // replicating the primary consumer's recovery log. Standbys are allocated in
  // a separate availability zone of the current primary, and tail the live log
  // to continuously mirror the primary's on-disk DB file structure. Should the
  // primary experience failure, one of the hot standbys will be assigned to take
  // over as the new shard primary, which is accomplished by simply opening its
  // local copy of the RocksDB.
  //
  // Note that under regular operation, Shard hand-off is zero downtime even if
  // standbys are zero, as the current primary will not cede ownership until the
  // replacement process has completed log playback. However, a process failure
  // will leave the Shard without an owner until log playback can complete.
  uint32 hot_standbys = 8 [(gogoproto.moretags) = "yaml:\"hot_standbys\""];

  // User-defined Labels of this ShardSpec. The label "id" is reserved and may
  // not be used with a ShardSpec's labels.
  protocol.LabelSet labels = 9 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\",omitempty,inline\""];
}

// ConsumerSpec describes a Consumer process instance and its configuration.
// It serves as a allocator MemberValue.
message ConsumerSpec {
  // ProcessSpec of the consumer.
  protocol.ProcessSpec process_spec = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\",inline\""];
  // Maximum number of assigned Shards.
  uint32 shard_limit = 2;
}

// ReplicaStatus is the status of a ShardSpec assigned to a ConsumerSpec.
// It serves as an allocator AssignmentValue. ReplicaStatus is reduced by taking
// the maximum enum value among statuses. Eg, if a primary is PRIMARY, one
// replica is BACKFILL and the other TAILING, then the status is PRIMARY. If one
// of the replicas transitioned to FAILED, than the status is FAILED. This
// reduction behavior is used to summarize status across all replicas.
message ReplicaStatus {
  enum Code {
    IDLE = 0;
    // The replica is actively playing the historical log.
    BACKFILL = 100;
    // The replica has finished playing the historical log, and is tailing the
    // live log to locally mirror recorded operations as they are produced. It
    // is a "hot standby" and can take over as primary at any time.
    TAILING = 200;
    // The replica is actively serving as primary.
    PRIMARY = 300;
    // The replica has encountered an unrecoverable error.
    FAILED = 400;
  };
  Code code = 1;

  // Errors encountered during replica processing. Set iff |code| is FAILED.
  repeated string errors = 2;
}

message ListRequest {
  // Selector optionally refines the set of shards which will be enumerated.
  // If zero-valued, all shards are returned. Otherwise, only ShardSpecs
  // matching the LabelSelector will be returned. One meta-label "id" is
  // additionally supported by the selector, where "id=example-shard-ID"
  // will match a ShardSpec with ID "example-shard-ID".
  protocol.LabelSelector selector = 1 [(gogoproto.nullable) = false];
}

message ListResponse {
  // Status of the List RPC.
  Status status = 1;
  // Header of the response.
  protocol.Header header = 2 [(gogoproto.nullable) = false];
  // Shards of the response.
  message Shard {
    ShardSpec spec = 1 [(gogoproto.nullable) = false];
    // Current ModRevision of the ShardSpec.
    int64 mod_revision = 2;
    // Route of the shard, including endpoints.
    protocol.Route route = 3 [(gogoproto.nullable) = false];
    // Status of each replica. Cardinality and ordering matches |route|.
    repeated ReplicaStatus status = 4 [(gogoproto.nullable) = false];
  }
  repeated Shard shards = 3 [(gogoproto.nullable) = false];
}

message ApplyRequest {
  // Change defines an insertion, update, or deletion to be applied to the set
  // of ShardSpecs. Exactly one of |upsert| or |delete| must be set.
  message Change {
    // Expected ModRevision of the current ShardSpec. If the shard is being
    // created, expect_mod_revision is zero.
    int64 expect_mod_revision = 1;
    // ShardSpec to be updated (if expect_mod_revision > 0) or created
    // (if expect_mod_revision == 0).
    ShardSpec upsert = 2;
    // Shard to be deleted. expect_mod_revision must not be zero.
    string delete = 3 [(gogoproto.casttype) = "ShardID"];
  }
  repeated Change changes = 1 [(gogoproto.nullable) = false];
}

message ApplyResponse {
  // Status of the Apply RPC.
  Status status = 1;
  // Header of the response.
  protocol.Header header = 2 [(gogoproto.nullable) = false];
}

message StatRequest {
  // Header may be attached by a proxying consumer peer.
  protocol.Header header = 1;
  // Shard to Stat.
  string shard = 2 [(gogoproto.casttype) = "ShardID"];
}

message StatResponse {
  // Status of the Stat RPC.
  Status status = 1;
  // Header of the response.
  protocol.Header header = 2 [(gogoproto.nullable) = false];
  // Offsets of journals being read by the shard.
  map<string, int64> offsets = 3 [(gogoproto.castkey) = "github.com/LiveRamp/gazette/v2/pkg/protocol.Journal"];
}

// Shard is the Consumer service API for interacting with Shards. Applications
// may wish to extend the Shard API with further domain-specific APIs.
service Shard {
  // Stat returns detailed status of a given Shard.
  rpc Stat(StatRequest) returns (StatResponse);
  // List Shards, their ShardSpecs and their processing status.
  rpc List(ListRequest) returns (ListResponse);
  // Apply changes to the collection of Shards managed by the consumer.
  rpc Apply(ApplyRequest) returns (ApplyResponse);
}
