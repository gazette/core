// Code generated by protoc-gen-gogo.
// source: recorded_op.proto
// DO NOT EDIT!

/*
	Package recoverylog is a generated protocol buffer package.

	It is generated from these files:
		recorded_op.proto

	It has these top-level messages:
		RecordedOp
		Property
		Segment
		FSMHints
		HintedFnode
*/
package recoverylog

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_LiveRamp_gazette_journal "github.com/LiveRamp/gazette/journal"

import strings "strings"
import reflect "reflect"

import io "io"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// RecordedOp records states changes occuring within a local file-system.
// Next tag: 9.
type RecordedOp struct {
	// Monotonically-increasing sequence number of this operation.
	SeqNo int64 `protobuf:"varint,1,req,name=seq_no,json=seqNo" json:"seq_no"`
	// Previous FSM checksum to which this operation should be applied (eg, the
	// expected checksum arrived at after applying the previous operation.
	Checksum uint32 `protobuf:"fixed32,2,req,name=checksum" json:"checksum"`
	// A randomly-assigned, constant ID of the author of this operation.
	Author   Author             `protobuf:"fixed32,3,req,name=author,casttype=Author" json:"author"`
	Create   *RecordedOp_Create `protobuf:"bytes,4,opt,name=create" json:"create,omitempty"`
	Link     *RecordedOp_Link   `protobuf:"bytes,5,opt,name=link" json:"link,omitempty"`
	Unlink   *RecordedOp_Link   `protobuf:"bytes,6,opt,name=unlink" json:"unlink,omitempty"`
	Write    *RecordedOp_Write  `protobuf:"bytes,7,opt,name=write" json:"write,omitempty"`
	Property *Property          `protobuf:"bytes,8,opt,name=property" json:"property,omitempty"`
}

func (m *RecordedOp) Reset()                    { *m = RecordedOp{} }
func (*RecordedOp) ProtoMessage()               {}
func (*RecordedOp) Descriptor() ([]byte, []int) { return fileDescriptorRecordedOp, []int{0} }

func (m *RecordedOp) GetSeqNo() int64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *RecordedOp) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

func (m *RecordedOp) GetAuthor() Author {
	if m != nil {
		return m.Author
	}
	return 0
}

func (m *RecordedOp) GetCreate() *RecordedOp_Create {
	if m != nil {
		return m.Create
	}
	return nil
}

func (m *RecordedOp) GetLink() *RecordedOp_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

func (m *RecordedOp) GetUnlink() *RecordedOp_Link {
	if m != nil {
		return m.Unlink
	}
	return nil
}

func (m *RecordedOp) GetWrite() *RecordedOp_Write {
	if m != nil {
		return m.Write
	}
	return nil
}

func (m *RecordedOp) GetProperty() *Property {
	if m != nil {
		return m.Property
	}
	return nil
}

// Creates a new file-node with id |seq_no|, initially linked to |path|.
type RecordedOp_Create struct {
	Path string `protobuf:"bytes,1,req,name=path" json:"path"`
}

func (m *RecordedOp_Create) Reset()                    { *m = RecordedOp_Create{} }
func (*RecordedOp_Create) ProtoMessage()               {}
func (*RecordedOp_Create) Descriptor() ([]byte, []int) { return fileDescriptorRecordedOp, []int{0, 0} }

func (m *RecordedOp_Create) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Links / unlinks |fnode| to |path|.
type RecordedOp_Link struct {
	Fnode Fnode  `protobuf:"varint,1,req,name=fnode,casttype=Fnode" json:"fnode"`
	Path  string `protobuf:"bytes,2,req,name=path" json:"path"`
}

func (m *RecordedOp_Link) Reset()                    { *m = RecordedOp_Link{} }
func (*RecordedOp_Link) ProtoMessage()               {}
func (*RecordedOp_Link) Descriptor() ([]byte, []int) { return fileDescriptorRecordedOp, []int{0, 1} }

func (m *RecordedOp_Link) GetFnode() Fnode {
	if m != nil {
		return m.Fnode
	}
	return 0
}

func (m *RecordedOp_Link) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

// Indicates |length| bytes should be written at |offset| to |fnode|.
// In a serialization stream, we expect |length| raw bytes of content to
// immediately follow this operation.
type RecordedOp_Write struct {
	Fnode Fnode `protobuf:"varint,1,req,name=fnode,casttype=Fnode" json:"fnode"`
	// Byte-offset within file to which the write is applied.
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset"`
	// Length of the write.
	Length int64 `protobuf:"varint,3,opt,name=length" json:"length"`
}

func (m *RecordedOp_Write) Reset()                    { *m = RecordedOp_Write{} }
func (*RecordedOp_Write) ProtoMessage()               {}
func (*RecordedOp_Write) Descriptor() ([]byte, []int) { return fileDescriptorRecordedOp, []int{0, 2} }

func (m *RecordedOp_Write) GetFnode() Fnode {
	if m != nil {
		return m.Fnode
	}
	return 0
}

func (m *RecordedOp_Write) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *RecordedOp_Write) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

// Properties are small files which rarely change, and are thus managed
// outside of regular Fnode tracking. See FSM.Properties.
type Property struct {
	Path    string `protobuf:"bytes,1,req,name=path" json:"path"`
	Content string `protobuf:"bytes,2,req,name=content" json:"content"`
}

func (m *Property) Reset()                    { *m = Property{} }
func (*Property) ProtoMessage()               {}
func (*Property) Descriptor() ([]byte, []int) { return fileDescriptorRecordedOp, []int{1} }

func (m *Property) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Property) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// A Segment represents a contiguous chunk of recovery log, identified by its
// (single) Author, FirstSeqNo, Checksum, & corresponding approximate
// lower-bound offset, and finally by a LastSeqNo.
// Next tag: 6.
type Segment struct {
	Author        Author `protobuf:"fixed32,1,req,name=author,casttype=Author" json:"author"`
	FirstSeqNo    int64  `protobuf:"varint,2,req,name=first_seq_no,json=firstSeqNo" json:"first_seq_no"`
	FirstOffset   int64  `protobuf:"varint,3,req,name=first_offset,json=firstOffset" json:"first_offset"`
	FirstChecksum uint32 `protobuf:"fixed32,4,req,name=first_checksum,json=firstChecksum" json:"first_checksum"`
	LastSeqNo     int64  `protobuf:"varint,5,req,name=last_seq_no,json=lastSeqNo" json:"last_seq_no"`
}

func (m *Segment) Reset()                    { *m = Segment{} }
func (*Segment) ProtoMessage()               {}
func (*Segment) Descriptor() ([]byte, []int) { return fileDescriptorRecordedOp, []int{2} }

func (m *Segment) GetAuthor() Author {
	if m != nil {
		return m.Author
	}
	return 0
}

func (m *Segment) GetFirstSeqNo() int64 {
	if m != nil {
		return m.FirstSeqNo
	}
	return 0
}

func (m *Segment) GetFirstOffset() int64 {
	if m != nil {
		return m.FirstOffset
	}
	return 0
}

func (m *Segment) GetFirstChecksum() uint32 {
	if m != nil {
		return m.FirstChecksum
	}
	return 0
}

func (m *Segment) GetLastSeqNo() int64 {
	if m != nil {
		return m.LastSeqNo
	}
	return 0
}

// Memoized state which allows an FSM to efficiently reach parity with the FSM
// which produced the FSMHints. FSMHints must minimally specify a recovery Log.
// Hints which are otherwise zero implicitly define an FSM which is empty, and
// should begin recording or playback at the log write head.
type FSMHints struct {
	Log        github_com_LiveRamp_gazette_journal.Name `protobuf:"bytes,1,req,name=log,casttype=github.com/LiveRamp/gazette/journal.Name" json:"log"`
	LiveNodes  []HintedFnode                            `protobuf:"bytes,2,rep,name=live_nodes,json=liveNodes" json:"live_nodes"`
	Properties []Property                               `protobuf:"bytes,3,rep,name=properties" json:"properties"`
}

func (m *FSMHints) Reset()                    { *m = FSMHints{} }
func (*FSMHints) ProtoMessage()               {}
func (*FSMHints) Descriptor() ([]byte, []int) { return fileDescriptorRecordedOp, []int{3} }

func (m *FSMHints) GetLog() github_com_LiveRamp_gazette_journal.Name {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *FSMHints) GetLiveNodes() []HintedFnode {
	if m != nil {
		return m.LiveNodes
	}
	return nil
}

func (m *FSMHints) GetProperties() []Property {
	if m != nil {
		return m.Properties
	}
	return nil
}

// A HintedFnode hints specific log Segments which contain Fnode operations.
type HintedFnode struct {
	Fnode    Fnode     `protobuf:"varint,1,req,name=fnode,casttype=Fnode" json:"fnode"`
	Segments []Segment `protobuf:"bytes,2,rep,name=segments" json:"segments"`
}

func (m *HintedFnode) Reset()                    { *m = HintedFnode{} }
func (*HintedFnode) ProtoMessage()               {}
func (*HintedFnode) Descriptor() ([]byte, []int) { return fileDescriptorRecordedOp, []int{4} }

func (m *HintedFnode) GetFnode() Fnode {
	if m != nil {
		return m.Fnode
	}
	return 0
}

func (m *HintedFnode) GetSegments() []Segment {
	if m != nil {
		return m.Segments
	}
	return nil
}

func init() {
	proto.RegisterType((*RecordedOp)(nil), "recoverylog.RecordedOp")
	proto.RegisterType((*RecordedOp_Create)(nil), "recoverylog.RecordedOp.Create")
	proto.RegisterType((*RecordedOp_Link)(nil), "recoverylog.RecordedOp.Link")
	proto.RegisterType((*RecordedOp_Write)(nil), "recoverylog.RecordedOp.Write")
	proto.RegisterType((*Property)(nil), "recoverylog.Property")
	proto.RegisterType((*Segment)(nil), "recoverylog.Segment")
	proto.RegisterType((*FSMHints)(nil), "recoverylog.FSMHints")
	proto.RegisterType((*HintedFnode)(nil), "recoverylog.HintedFnode")
}
func (m *RecordedOp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordedOp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.SeqNo))
	dAtA[i] = 0x15
	i++
	i = encodeFixed32RecordedOp(dAtA, i, uint32(m.Checksum))
	dAtA[i] = 0x1d
	i++
	i = encodeFixed32RecordedOp(dAtA, i, uint32(m.Author))
	if m.Create != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRecordedOp(dAtA, i, uint64(m.Create.Size()))
		n1, err := m.Create.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Link != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRecordedOp(dAtA, i, uint64(m.Link.Size()))
		n2, err := m.Link.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Unlink != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRecordedOp(dAtA, i, uint64(m.Unlink.Size()))
		n3, err := m.Unlink.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Write != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRecordedOp(dAtA, i, uint64(m.Write.Size()))
		n4, err := m.Write.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Property != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRecordedOp(dAtA, i, uint64(m.Property.Size()))
		n5, err := m.Property.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *RecordedOp_Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordedOp_Create) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(len(m.Path)))
	i += copy(dAtA[i:], m.Path)
	return i, nil
}

func (m *RecordedOp_Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordedOp_Link) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.Fnode))
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(len(m.Path)))
	i += copy(dAtA[i:], m.Path)
	return i, nil
}

func (m *RecordedOp_Write) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordedOp_Write) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.Fnode))
	dAtA[i] = 0x10
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.Offset))
	dAtA[i] = 0x18
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.Length))
	return i, nil
}

func (m *Property) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Property) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(len(m.Path)))
	i += copy(dAtA[i:], m.Path)
	dAtA[i] = 0x12
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(len(m.Content)))
	i += copy(dAtA[i:], m.Content)
	return i, nil
}

func (m *Segment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Segment) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xd
	i++
	i = encodeFixed32RecordedOp(dAtA, i, uint32(m.Author))
	dAtA[i] = 0x10
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.FirstSeqNo))
	dAtA[i] = 0x18
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.FirstOffset))
	dAtA[i] = 0x25
	i++
	i = encodeFixed32RecordedOp(dAtA, i, uint32(m.FirstChecksum))
	dAtA[i] = 0x28
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.LastSeqNo))
	return i, nil
}

func (m *FSMHints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FSMHints) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(len(m.Log)))
	i += copy(dAtA[i:], m.Log)
	if len(m.LiveNodes) > 0 {
		for _, msg := range m.LiveNodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRecordedOp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Properties) > 0 {
		for _, msg := range m.Properties {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRecordedOp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HintedFnode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HintedFnode) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0x8
	i++
	i = encodeVarintRecordedOp(dAtA, i, uint64(m.Fnode))
	if len(m.Segments) > 0 {
		for _, msg := range m.Segments {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRecordedOp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64RecordedOp(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32RecordedOp(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRecordedOp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RecordedOp) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRecordedOp(uint64(m.SeqNo))
	n += 5
	n += 5
	if m.Create != nil {
		l = m.Create.Size()
		n += 1 + l + sovRecordedOp(uint64(l))
	}
	if m.Link != nil {
		l = m.Link.Size()
		n += 1 + l + sovRecordedOp(uint64(l))
	}
	if m.Unlink != nil {
		l = m.Unlink.Size()
		n += 1 + l + sovRecordedOp(uint64(l))
	}
	if m.Write != nil {
		l = m.Write.Size()
		n += 1 + l + sovRecordedOp(uint64(l))
	}
	if m.Property != nil {
		l = m.Property.Size()
		n += 1 + l + sovRecordedOp(uint64(l))
	}
	return n
}

func (m *RecordedOp_Create) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovRecordedOp(uint64(l))
	return n
}

func (m *RecordedOp_Link) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRecordedOp(uint64(m.Fnode))
	l = len(m.Path)
	n += 1 + l + sovRecordedOp(uint64(l))
	return n
}

func (m *RecordedOp_Write) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRecordedOp(uint64(m.Fnode))
	n += 1 + sovRecordedOp(uint64(m.Offset))
	n += 1 + sovRecordedOp(uint64(m.Length))
	return n
}

func (m *Property) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	n += 1 + l + sovRecordedOp(uint64(l))
	l = len(m.Content)
	n += 1 + l + sovRecordedOp(uint64(l))
	return n
}

func (m *Segment) Size() (n int) {
	var l int
	_ = l
	n += 5
	n += 1 + sovRecordedOp(uint64(m.FirstSeqNo))
	n += 1 + sovRecordedOp(uint64(m.FirstOffset))
	n += 5
	n += 1 + sovRecordedOp(uint64(m.LastSeqNo))
	return n
}

func (m *FSMHints) Size() (n int) {
	var l int
	_ = l
	l = len(m.Log)
	n += 1 + l + sovRecordedOp(uint64(l))
	if len(m.LiveNodes) > 0 {
		for _, e := range m.LiveNodes {
			l = e.Size()
			n += 1 + l + sovRecordedOp(uint64(l))
		}
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovRecordedOp(uint64(l))
		}
	}
	return n
}

func (m *HintedFnode) Size() (n int) {
	var l int
	_ = l
	n += 1 + sovRecordedOp(uint64(m.Fnode))
	if len(m.Segments) > 0 {
		for _, e := range m.Segments {
			l = e.Size()
			n += 1 + l + sovRecordedOp(uint64(l))
		}
	}
	return n
}

func sovRecordedOp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRecordedOp(x uint64) (n int) {
	return sovRecordedOp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RecordedOp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordedOp{`,
		`SeqNo:` + fmt.Sprintf("%v", this.SeqNo) + `,`,
		`Checksum:` + fmt.Sprintf("%v", this.Checksum) + `,`,
		`Author:` + fmt.Sprintf("%v", this.Author) + `,`,
		`Create:` + strings.Replace(fmt.Sprintf("%v", this.Create), "RecordedOp_Create", "RecordedOp_Create", 1) + `,`,
		`Link:` + strings.Replace(fmt.Sprintf("%v", this.Link), "RecordedOp_Link", "RecordedOp_Link", 1) + `,`,
		`Unlink:` + strings.Replace(fmt.Sprintf("%v", this.Unlink), "RecordedOp_Link", "RecordedOp_Link", 1) + `,`,
		`Write:` + strings.Replace(fmt.Sprintf("%v", this.Write), "RecordedOp_Write", "RecordedOp_Write", 1) + `,`,
		`Property:` + strings.Replace(fmt.Sprintf("%v", this.Property), "Property", "Property", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordedOp_Create) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordedOp_Create{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordedOp_Link) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordedOp_Link{`,
		`Fnode:` + fmt.Sprintf("%v", this.Fnode) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecordedOp_Write) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecordedOp_Write{`,
		`Fnode:` + fmt.Sprintf("%v", this.Fnode) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Property) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Property{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Segment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Segment{`,
		`Author:` + fmt.Sprintf("%v", this.Author) + `,`,
		`FirstSeqNo:` + fmt.Sprintf("%v", this.FirstSeqNo) + `,`,
		`FirstOffset:` + fmt.Sprintf("%v", this.FirstOffset) + `,`,
		`FirstChecksum:` + fmt.Sprintf("%v", this.FirstChecksum) + `,`,
		`LastSeqNo:` + fmt.Sprintf("%v", this.LastSeqNo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FSMHints) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FSMHints{`,
		`Log:` + fmt.Sprintf("%v", this.Log) + `,`,
		`LiveNodes:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.LiveNodes), "HintedFnode", "HintedFnode", 1), `&`, ``, 1) + `,`,
		`Properties:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Properties), "Property", "Property", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HintedFnode) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HintedFnode{`,
		`Fnode:` + fmt.Sprintf("%v", this.Fnode) + `,`,
		`Segments:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Segments), "Segment", "Segment", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRecordedOp(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RecordedOp) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordedOp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordedOp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Checksum = uint32(dAtA[iNdEx-4])
			m.Checksum |= uint32(dAtA[iNdEx-3]) << 8
			m.Checksum |= uint32(dAtA[iNdEx-2]) << 16
			m.Checksum |= uint32(dAtA[iNdEx-1]) << 24
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			m.Author = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Author = Author(dAtA[iNdEx-4])
			m.Author |= Author(dAtA[iNdEx-3]) << 8
			m.Author |= Author(dAtA[iNdEx-2]) << 16
			m.Author |= Author(dAtA[iNdEx-1]) << 24
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Create", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Create == nil {
				m.Create = &RecordedOp_Create{}
			}
			if err := m.Create.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Link == nil {
				m.Link = &RecordedOp_Link{}
			}
			if err := m.Link.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlink", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unlink == nil {
				m.Unlink = &RecordedOp_Link{}
			}
			if err := m.Unlink.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Write", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Write == nil {
				m.Write = &RecordedOp_Write{}
			}
			if err := m.Write.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Property", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Property == nil {
				m.Property = &Property{}
			}
			if err := m.Property.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordedOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("seq_no")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("checksum")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("author")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordedOp_Create) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordedOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("path")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordedOp_Link) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnode", wireType)
			}
			m.Fnode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnode |= (Fnode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordedOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fnode")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("path")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordedOp_Write) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Write: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Write: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnode", wireType)
			}
			m.Fnode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnode |= (Fnode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordedOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fnode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Property) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Property: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Property: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordedOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("path")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("content")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Segment) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Segment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Segment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			m.Author = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.Author = Author(dAtA[iNdEx-4])
			m.Author |= Author(dAtA[iNdEx-3]) << 8
			m.Author |= Author(dAtA[iNdEx-2]) << 16
			m.Author |= Author(dAtA[iNdEx-1]) << 24
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeqNo", wireType)
			}
			m.FirstSeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstSeqNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstOffset", wireType)
			}
			m.FirstOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstOffset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstChecksum", wireType)
			}
			m.FirstChecksum = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 4
			m.FirstChecksum = uint32(dAtA[iNdEx-4])
			m.FirstChecksum |= uint32(dAtA[iNdEx-3]) << 8
			m.FirstChecksum |= uint32(dAtA[iNdEx-2]) << 16
			m.FirstChecksum |= uint32(dAtA[iNdEx-1]) << 24
			hasFields[0] |= uint64(0x00000008)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeqNo", wireType)
			}
			m.LastSeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeqNo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordedOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("author")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("first_seq_no")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("first_offset")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("first_checksum")
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("last_seq_no")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FSMHints) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FSMHints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FSMHints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = github_com_LiveRamp_gazette_journal.Name(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveNodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveNodes = append(m.LiveNodes, HintedFnode{})
			if err := m.LiveNodes[len(m.LiveNodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, Property{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordedOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("log")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HintedFnode) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HintedFnode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HintedFnode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnode", wireType)
			}
			m.Fnode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnode |= (Fnode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Segments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRecordedOp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Segments = append(m.Segments, Segment{})
			if err := m.Segments[len(m.Segments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRecordedOp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRecordedOp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("fnode")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecordedOp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecordedOp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecordedOp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRecordedOp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRecordedOp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRecordedOp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRecordedOp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecordedOp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("recorded_op.proto", fileDescriptorRecordedOp) }

var fileDescriptorRecordedOp = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x7f, 0x93, 0xde, 0x7c, 0xad, 0xf4, 0x8d, 0x8a, 0x34, 0x2a, 0xc5, 0x8d, 0x0a, 0x2a,
	0x91, 0x10, 0x49, 0x29, 0xa8, 0x0b, 0x10, 0x0b, 0x5a, 0xa9, 0x42, 0x50, 0x5a, 0xe4, 0x2e, 0x58,
	0x46, 0xae, 0x73, 0xe3, 0x98, 0x3a, 0x33, 0xae, 0x3d, 0x0e, 0x2a, 0x2b, 0x5e, 0x85, 0xb7, 0xe9,
	0xb2, 0x4b, 0x24, 0xa4, 0x0a, 0xb2, 0xe2, 0x19, 0x58, 0x21, 0x8f, 0xc7, 0xae, 0x23, 0x11, 0x94,
	0x4d, 0x94, 0xb9, 0xe7, 0x9c, 0xfb, 0x37, 0x67, 0x0c, 0xff, 0x27, 0xe8, 0xf3, 0x64, 0x80, 0x83,
	0x3e, 0x8f, 0xbb, 0x71, 0xc2, 0x05, 0x27, 0xad, 0x3c, 0x34, 0xc1, 0xe4, 0x32, 0xe2, 0xc1, 0xfa,
	0xe3, 0x20, 0x14, 0xa3, 0xec, 0xac, 0xeb, 0xf3, 0x71, 0x2f, 0xe0, 0x01, 0xef, 0x49, 0xce, 0x59,
	0x36, 0x94, 0x27, 0x79, 0x90, 0xff, 0x0a, 0xed, 0xd6, 0x2f, 0x13, 0xc0, 0x55, 0x19, 0x4f, 0x62,
	0x72, 0x17, 0xec, 0x14, 0x2f, 0xfa, 0x8c, 0x53, 0xad, 0xad, 0x77, 0x8c, 0x7d, 0xf3, 0xea, 0x66,
	0x73, 0xc9, 0xb5, 0x52, 0xbc, 0x38, 0xe6, 0xa4, 0x0d, 0x4d, 0x7f, 0x84, 0xfe, 0x79, 0x9a, 0x8d,
	0xa9, 0xde, 0xd6, 0x3b, 0x0d, 0x05, 0x57, 0x51, 0xb2, 0x0d, 0xb6, 0x97, 0x89, 0x11, 0x4f, 0xa8,
	0x21, 0xf1, 0xd5, 0x1c, 0xff, 0x7d, 0xb3, 0x69, 0xbf, 0x92, 0x51, 0x57, 0xa1, 0x64, 0x0f, 0x6c,
	0x3f, 0x41, 0x4f, 0x20, 0x35, 0xdb, 0x5a, 0xa7, 0xb5, 0xeb, 0x74, 0x6b, 0x23, 0x74, 0x6f, 0xfb,
	0xe9, 0x1e, 0x48, 0x96, 0xab, 0xd8, 0x64, 0x07, 0xcc, 0x28, 0x64, 0xe7, 0xd4, 0x92, 0xaa, 0x8d,
	0x79, 0xaa, 0xa3, 0x90, 0x9d, 0xbb, 0x92, 0x49, 0x9e, 0x81, 0x9d, 0x31, 0xa9, 0xb1, 0x17, 0xd0,
	0x28, 0x2e, 0x79, 0x0a, 0xd6, 0xa7, 0x24, 0x14, 0x48, 0x1b, 0x52, 0x74, 0x6f, 0x9e, 0xe8, 0x43,
	0x4e, 0x72, 0x0b, 0x2e, 0x79, 0x02, 0xcd, 0x38, 0xe1, 0x31, 0x26, 0xe2, 0x92, 0x36, 0xa5, 0xee,
	0xce, 0x8c, 0xee, 0xbd, 0x02, 0xdd, 0x8a, 0xb6, 0xde, 0x01, 0xbb, 0x98, 0x90, 0x50, 0x30, 0x63,
	0x4f, 0x8c, 0xe4, 0xda, 0x97, 0xd5, 0x5e, 0x65, 0xe4, 0xb9, 0x79, 0xfd, 0x75, 0x73, 0x69, 0xfd,
	0x2d, 0x98, 0x79, 0x87, 0xe4, 0x3e, 0x58, 0x43, 0xc6, 0x07, 0xa8, 0xee, 0x67, 0x45, 0x2d, 0xd8,
	0x3a, 0xcc, 0x83, 0x6e, 0x81, 0x55, 0xc9, 0xf4, 0x39, 0xc9, 0x18, 0x58, 0xb2, 0xf3, 0xc5, 0xb2,
	0x6d, 0x80, 0xcd, 0x87, 0xc3, 0x14, 0x05, 0xd5, 0xdb, 0x5a, 0xe5, 0x09, 0x15, 0xcb, 0xd1, 0x08,
	0x59, 0x20, 0x46, 0xd4, 0xa8, 0xa3, 0x45, 0xac, 0xa8, 0x57, 0xfc, 0x6e, 0xbd, 0x81, 0x66, 0xb9,
	0x82, 0xf9, 0xe3, 0x12, 0x07, 0x1a, 0x3e, 0x67, 0x02, 0x99, 0x98, 0x69, 0xbf, 0x0c, 0xaa, 0x5c,
	0xdf, 0x35, 0x68, 0x9c, 0x62, 0x30, 0x46, 0x26, 0x6a, 0xa6, 0xd3, 0xfe, 0x69, 0xba, 0x6d, 0xf8,
	0x6f, 0x18, 0x26, 0xa9, 0xe8, 0x2b, 0x87, 0xeb, 0x35, 0x87, 0x83, 0x44, 0x4e, 0xa5, 0xcd, 0x1f,
	0x96, 0x3c, 0x35, 0xb5, 0x51, 0xe3, 0xb5, 0x24, 0x72, 0x52, 0x8c, 0xfe, 0x08, 0x56, 0x0b, 0x62,
	0xf5, 0x2a, 0xcc, 0xda, 0xab, 0x58, 0x91, 0xd8, 0x41, 0xf9, 0x34, 0x1e, 0x40, 0x2b, 0xf2, 0x6e,
	0x8b, 0x5b, 0xb5, 0xa4, 0xcb, 0x39, 0x20, 0x6b, 0xab, 0xe9, 0xae, 0x35, 0x68, 0x1e, 0x9e, 0xbe,
	0x7b, 0x1d, 0x32, 0x91, 0x92, 0x7d, 0x30, 0x22, 0x1e, 0xa8, 0x4d, 0xed, 0xa8, 0xd9, 0x3a, 0xb5,
	0x57, 0x7e, 0x14, 0x4e, 0xd0, 0xf5, 0xc6, 0x71, 0x2f, 0xf0, 0x3e, 0xa3, 0x10, 0xd8, 0xfb, 0xc8,
	0xb3, 0x84, 0x79, 0x51, 0xf7, 0xd8, 0x1b, 0xa3, 0x9b, 0x8b, 0xc9, 0x4b, 0x80, 0x28, 0x9c, 0x60,
	0x3f, 0xbf, 0xcf, 0x94, 0xea, 0x6d, 0xa3, 0xd3, 0xda, 0xa5, 0x33, 0xe6, 0xcc, 0x6b, 0xe1, 0x40,
	0xde, 0x7b, 0xd5, 0x55, 0x38, 0xc1, 0xe3, 0x5c, 0x40, 0x5e, 0x00, 0x28, 0xcb, 0x86, 0x98, 0x52,
	0x43, 0xca, 0xff, 0xee, 0xed, 0x72, 0x9d, 0xb7, 0x74, 0x35, 0x52, 0x0c, 0xad, 0x5a, 0x89, 0xc5,
	0x8c, 0xb7, 0x07, 0xcd, 0xb4, 0xb8, 0xe3, 0xb2, 0xe7, 0xb5, 0x99, 0xa2, 0xca, 0x00, 0xe5, 0x57,
	0xa8, 0xe4, 0x16, 0x15, 0xf7, 0xd7, 0xbe, 0xfd, 0x74, 0x96, 0xbe, 0x4c, 0x1d, 0xed, 0x6a, 0xea,
	0x68, 0xd7, 0x53, 0x47, 0xfb, 0x31, 0x75, 0xb4, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x90, 0xf1,
	0x37, 0x37, 0x3f, 0x05, 0x00, 0x00,
}
