Usage:
  gazctl [OPTIONS] shards [shards-OPTIONS] prune [prune-OPTIONS]

Recovery logs capture every write which has ever occurred in a Shard DB.
This includes all prior writes of client keys & values, and also RocksDB
compactions, which can significantly inflate the total volume of writes
relative to the data currently represented in a RocksDB.

Prune log examines the provided hints to identify Fragments of the log
which have no intersection with any live files of the DB, and can thus
be safely deleted.

CAUTION:

When pruning recovery logs which have been forked from other logs,
it's crucial that *all* shards which participate in the forked log
history are included in the prune operation. When pruning a log,
hints from all referencing shards are inspected to determine if a
fragment is overlapped, and a failure to include a shard which
references the log may cause data it depends on to be deleted.


Help Options:
  -h, --help                                              Show this help message

[shards command options]

    Interact with consumer shards:
          --zone=                                         Availability zone within which this process is running (default: local) [$ZONE]

    Logging:
          --log.level=[trace|debug|info|warn|error|fatal] Logging level (default: warn) [$LOG_LEVEL]
          --log.format=[json|text|color]                  Logging output format (default: text) [$LOG_FORMAT]

    Consumer:
          --consumer.address=                             Service address endpoint (default: http://localhost:8080) [$CONSUMER_ADDRESS]
          --consumer.cert-file=                           Path to the client TLS certificate [$CONSUMER_CERT_FILE]
          --consumer.cert-key-file=                       Path to the client TLS private key [$CONSUMER_CERT_KEY_FILE]
          --consumer.trusted-ca-file=                     Path to the trusted CA for client verification of server certificates
                                                          [$CONSUMER_TRUSTED_CA_FILE]
          --consumer.auth-keys=                           Whitespace or comma separated, base64-encoded keys. The first key is used to sign
                                                          Authorization tokens. [$CONSUMER_AUTH_KEYS]
          --consumer.cache.size=                          Size of client route cache. If <= zero, no cache is used (server always proxies)
                                                          (default: 0) [$CONSUMER_CACHE_SIZE]
          --consumer.cache.ttl=                           Time-to-live of route cache entries. (default: 1m) [$CONSUMER_CACHE_TTL]

    Broker:
          --broker.address=                               Service address endpoint (default: http://localhost:8080) [$BROKER_ADDRESS]
          --broker.cert-file=                             Path to the client TLS certificate [$BROKER_CERT_FILE]
          --broker.cert-key-file=                         Path to the client TLS private key [$BROKER_CERT_KEY_FILE]
          --broker.trusted-ca-file=                       Path to the trusted CA for client verification of server certificates
                                                          [$BROKER_TRUSTED_CA_FILE]
          --broker.auth-keys=                             Whitespace or comma separated, base64-encoded keys. The first key is used to sign
                                                          Authorization tokens. [$BROKER_AUTH_KEYS]
          --broker.cache.size=                            Size of client route cache. If <= zero, no cache is used (server always proxies)
                                                          (default: 0) [$BROKER_CACHE_SIZE]
          --broker.cache.ttl=                             Time-to-live of route cache entries. (default: 1m) [$BROKER_CACHE_TTL]

[prune command options]
      -l, --selector=                                     Label Selector query to filter on
          --dry-run                                       Perform a dry-run of the apply

