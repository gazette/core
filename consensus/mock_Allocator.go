// Code generated by mockery v1.0.0
package consensus

import client "github.com/coreos/etcd/client"
import mock "github.com/stretchr/testify/mock"

// MockAllocator is an autogenerated mock type for the Allocator type
type MockAllocator struct {
	mock.Mock
}

// FixedItems provides a mock function with given fields:
func (_m *MockAllocator) FixedItems() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// InstanceKey provides a mock function with given fields:
func (_m *MockAllocator) InstanceKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ItemIsReadyForPromotion provides a mock function with given fields: item, state
func (_m *MockAllocator) ItemIsReadyForPromotion(item string, state string) bool {
	ret := _m.Called(item, state)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(item, state)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ItemRoute provides a mock function with given fields: item, route, index, tree
func (_m *MockAllocator) ItemRoute(item string, route Route, index int, tree *client.Node) {
	_m.Called(item, route, index, tree)
}

// ItemState provides a mock function with given fields: item
func (_m *MockAllocator) ItemState(item string) string {
	ret := _m.Called(item)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// KeysAPI provides a mock function with given fields:
func (_m *MockAllocator) KeysAPI() client.KeysAPI {
	ret := _m.Called()

	var r0 client.KeysAPI
	if rf, ok := ret.Get(0).(func() client.KeysAPI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.KeysAPI)
		}
	}

	return r0
}

// PathRoot provides a mock function with given fields:
func (_m *MockAllocator) PathRoot() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Replicas provides a mock function with given fields:
func (_m *MockAllocator) Replicas() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
