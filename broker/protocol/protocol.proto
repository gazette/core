syntax = "proto3";

package protocol;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";

option go_package = "go.gazette.dev/core/broker/protocol";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.marshaler_all) = true;
option (gogoproto.protosizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

// Status is a response status code, used universally across Gazette RPC APIs.
enum Status {
  OK = 0;
  // The named journal does not exist.
  JOURNAL_NOT_FOUND = 1;
  // There is no current primary broker for the journal. This is a temporary
  // condition which should quickly resolve, assuming sufficient broker
  // capacity.
  NO_JOURNAL_PRIMARY_BROKER = 2;
  // The present broker is not the assigned primary broker for the journal.
  NOT_JOURNAL_PRIMARY_BROKER = 3;
  // The present broker is not an assigned broker for the journal.
  NOT_JOURNAL_BROKER = 5;
  // There are an insufficient number of assigned brokers for the journal
  // to meet its required replication.
  INSUFFICIENT_JOURNAL_BROKERS = 4;
  // The requested offset is not yet available. This indicates either that the
  // offset has not yet been written, or that the broker is not yet aware of a
  // written fragment covering the offset. Returned only by non-blocking reads.
  OFFSET_NOT_YET_AVAILABLE = 6;
  // The peer disagrees with the Route accompanying a ReplicateRequest.
  WRONG_ROUTE = 7;
  // The peer disagrees with the proposal accompanying a ReplicateRequest.
  PROPOSAL_MISMATCH = 8;
  // The Etcd transaction failed. Returned by Update RPC when an
  // expect_mod_revision of the UpdateRequest differs from the current
  // ModRevision of the JournalSpec within the store.
  ETCD_TRANSACTION_FAILED = 9;
  // A disallowed journal access was attempted (eg, a write where the
  // journal disables writes, or read where journals disable reads).
  NOT_ALLOWED = 10;
  // The Append is refused because its requested offset is not equal
  // to the furthest written offset of the journal.
  WRONG_APPEND_OFFSET = 11;
  // The Append is refused because the replication pipeline tracks a smaller
  // journal offset than that of the remote fragment index. This indicates
  // that journal replication consistency has been lost in the past, due to
  // too many broker or Etcd failures.
  INDEX_HAS_GREATER_OFFSET = 12;
  // The Append is refused because a registers selector was provided with the
  // request, but it was not matched by current register values of the journal.
  REGISTER_MISMATCH = 13;
}

// CompressionCode defines codecs known to Gazette.
enum CompressionCodec {
  // INVALID is the zero-valued CompressionCodec, and is not a valid codec.
  INVALID = 0;
  // NONE encodes Fragments without any applied compression, with default suffix
  // ".raw".
  NONE = 1;
  // GZIP encodes Fragments using the Gzip library, with default suffix ".gz".
  GZIP = 2;
  // ZSTANDARD encodes Fragments using the ZStandard library, with default
  // suffix ".zst".
  ZSTANDARD = 3;
  // SNAPPY encodes Fragments using the Snappy library, with default suffix
  // ".sz".
  SNAPPY = 4;
  // GZIP_OFFLOAD_DECOMPRESSION is the GZIP codec with additional behavior
  // around reads and writes to remote Fragment stores, designed to offload
  // the work of decompression onto compatible stores. Specifically:
  //  * Fragments are written with a "Content-Encoding: gzip" header.
  //  * Client read requests are made with "Accept-Encoding: identity".
  // This can be helpful in contexts where reader IO bandwidth to the storage
  // API is unconstrained, as the cost of decompression is offloaded to the
  // store and CPU-intensive batch readers may receive a parallelism benefit.
  // While this codec may provide substantial read-time performance
  // improvements, it is an advanced configuration and the "Content-Encoding"
  // header handling can be subtle and sometimes confusing. It uses the default
  // suffix ".gzod".
  GZIP_OFFLOAD_DECOMPRESSION = 5;
}

// Label defines a key & value pair which can be attached to entities like
// JournalSpecs and BrokerSpecs. Labels may be used to provide identifying
// attributes which do not directly imply semantics to the core system, but
// are meaningful to users or for higher-level Gazette tools.
message Label {
  option (gogoproto.equal) = true;

  string name = 1;
  string value = 2;
}

// LabelSet is a collection of labels and their values.
message LabelSet {
  option (gogoproto.equal) = true;

  // Labels of the set. Instances must be unique and sorted over (Name, Value).
  repeated Label labels = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\",omitempty\""
  ];
}

// LabelSelector defines a filter over LabelSets.
message LabelSelector {
  option (gogoproto.equal) = true;

  // LabelSelector implements a custom String function returning the canonical,
  // parseable string representation of the selector.
  option (gogoproto.goproto_stringer) = false;

  // Include is Labels which must be matched for a LabelSet to be selected. If
  // empty, all Labels are included. An include Label with empty ("") value is
  // matched by a Label of the same name having any value.
  LabelSet include = 1 [ (gogoproto.nullable) = false ];
  // Exclude is Labels which cannot be matched for a LabelSet to be selected. If
  // empty, no Labels are excluded. An exclude Label with empty ("") value
  // excludes a Label of the same name having any value.
  LabelSet exclude = 2 [ (gogoproto.nullable) = false ];
}

// JournalSpec describes a Journal and its configuration.
message JournalSpec {
  option (gogoproto.equal) = true;

  // Name of the Journal.
  string name = 1 [
    (gogoproto.casttype) = "Journal",
    (gogoproto.moretags) = "yaml:\",omitempty\""
  ];

  // Desired replication of this Journal. This defines the Journal's tolerance
  // to broker failures before data loss can occur (eg, a replication factor
  // of three means two failures are tolerated).
  int32 replication = 2 [ (gogoproto.moretags) = "yaml:\",omitempty\"" ];

  // User-defined Labels of this JournalSpec. Two label names are reserved
  // and may not be used within a JournalSpec's Labels: "name" and "prefix".
  LabelSet labels = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\",omitempty,inline\""
  ];

  // Fragment is JournalSpec configuration which pertains to the creation,
  // persistence, and indexing of the Journal's Fragments.
  message Fragment {
    option (gogoproto.equal) = true;

    // Target content length of each Fragment. In normal operation after
    // Fragments reach at least this length, they will be closed and new ones
    // begun. Note lengths may be smaller at times (eg, due to changes in
    // Journal routing topology). Content length differs from Fragment file
    // size, in that the former reflects uncompressed bytes.
    int64 length = 1 [ (gogoproto.moretags) = "yaml:\",omitempty\"" ];

    // Codec used to compress Journal Fragments.
    CompressionCodec compression_codec = 2
        [ (gogoproto.moretags) = "yaml:\"compression_codec,omitempty\"" ];

    // Storage backend base path for this Journal's Fragments. Must be in URL
    // form, with the choice of backend defined by the scheme. The full path of
    // a Journal's Fragment is derived by joining the store path with the
    // Fragment's ContentPath. Eg, given a fragment_store of
    //   "s3://My-AWS-bucket/a/prefix" and a JournalSpec of name "my/journal",
    // a complete Fragment path might be:
    //   "s3://My-AWS-bucket/a/prefix/my/journal/000123-000456-789abcdef.gzip
    //
    // Multiple stores may be specified, in which case the Journal's Fragments
    // are the union of all Fragments present across all stores, and new
    // Fragments always persist to the first specified store. This can be
    // helpful in performing incremental migrations, where new Journal content
    // is written to the new store, while content in the old store remains
    // available (and, depending on fragment_retention or recovery log pruning,
    // may eventually be removed).
    //
    // If no stores are specified, the Journal is still use-able but will
    // not persist Fragments to any a backing fragment store. This allows for
    // real-time streaming use cases where reads of historical data are not
    // needed.
    repeated string stores = 3 [
      (gogoproto.casttype) = "FragmentStore",
      (gogoproto.moretags) = "yaml:\",omitempty\""
    ];

    // Interval of time between refreshes of remote Fragment listings from
    // configured fragment_stores.
    google.protobuf.Duration refresh_interval = 4 [
      (gogoproto.stdduration) = true,
      (gogoproto.nullable) = false,
      (gogoproto.moretags) = "yaml:\"refresh_interval,omitempty\""
    ];

    // Retention duration for historical Fragments of this Journal within the
    // Fragment stores. If less than or equal to zero, Fragments are retained
    // indefinitely.
    google.protobuf.Duration retention = 5 [
      (gogoproto.stdduration) = true,
      (gogoproto.nullable) = false,
      (gogoproto.moretags) = "yaml:\",omitempty\""
    ];

    // Flush interval defines a uniform UTC time segment which, when passed,
    // will prompt brokers to close and persist a fragment presently being
    // written.
    //
    // Flush interval may be helpful in integrating the journal with a regularly
    // scheduled batch work-flow which processes new files from the fragment
    // store and has no particular awareness of Gazette. For example, setting
    // flush_interval to 3600s will cause brokers to persist their present
    // fragment on the hour, every hour, even if it has not yet reached its
    // target length. A batch work-flow running at 5 minutes past the hour is
    // then reasonably assured of seeing all events from the past hour.
    //
    // See also "gazctl journals fragments --help" for more discussion.
    google.protobuf.Duration flush_interval = 6 [
      (gogoproto.stdduration) = true,
      (gogoproto.nullable) = false,
      (gogoproto.moretags) = "yaml:\"flush_interval,omitempty\""
    ];

    // Path postfix template is a Go template which evaluates to a partial
    // path under which fragments are persisted to the store. A complete
    // fragment path is constructed by appending path components from the
    // fragment store, then the journal name, and then the postfix template.
    // Path post-fixes can help in maintaining Hive compatible partitioning
    // over fragment creation time. The fields ".Spool" and ".JournalSpec"
    // are available for introspection in the template. For example,
    // to partition on the UTC date and hour of creation, use:
    //
    //    date={{ .Spool.FirstAppendTime.Format "2006-01-02" }}/hour={{
    //    .Spool.FirstAppendTime.Format "15" }}
    //
    // Which will produce a path postfix like "date=2019-11-19/hour=22".
    string path_postfix_template = 7
        [ (gogoproto.moretags) = "yaml:\"path_postfix_template,omitempty\"" ];
  }
  Fragment fragment = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\",omitempty\""
  ];

  // Flags define Journal IO control behaviors. Where possible, flags are named
  // after an equivalent POSIX flag.
  enum Flag {
    // NOT_SPECIFIED is considered as equivalent to O_RDWR by the broker. When
    // JournalSpecs are union'ed (eg, by the `journalspace` pkg), NOT_SPECIFIED
    // is considered as unset relative to any other non-zero Flag value.
    NOT_SPECIFIED = 0x00;

    // Only one of O_RDONLY, O_WRONLY, or O_RDWR may be set.

    // The Journal is available for reads (only).
    O_RDONLY = 0x01;
    // The Journal is available for writes (only).
    O_WRONLY = 0x02;
    // The Journal may be used for reads or writes.
    O_RDWR = 0x04;
  }
  // Flags of the Journal, as a combination of Flag enum values. The Flag enum
  // is not used directly, as protobuf enums do not allow for or'ed bitfields.
  uint32 flags = 6 [
    (gogoproto.casttype) = "JournalSpec_Flag",
    (gogoproto.moretags) = "yaml:\",omitempty\""
  ];

  // Maximum rate, in bytes-per-second, at which appends of this journal will
  // be processed. If zero (the default), no rate limiting is applied. A global
  // rate limit still may be in effect, in which case the effective rate is the
  // smaller of the journal vs global rate.
  int64 max_append_rate = 7
      [ (gogoproto.moretags) = "yaml:\"max_append_rate,omitempty\"" ];
}

// ProcessSpec describes a uniquely identified process and its addressable
// endpoint.
message ProcessSpec {
  // ID composes a zone and a suffix to uniquely identify a ProcessSpec.
  message ID {
    option (gogoproto.equal) = true;

    // "Zone" in which the process is running. Zones may be AWS, Azure, or
    // Google Cloud Platform zone identifiers, or rack locations within a colo,
    // or given some other custom meaning. Gazette will replicate across
    // multiple zones, and seeks to minimize traffic which must cross zones (for
    // example, by proxying reads to a broker in the current zone).
    string zone = 1;
    // Unique suffix of the process within |zone|. It is permissible for a
    // suffix value to repeat across zones, but never within zones. In practice,
    // it's recommended to use a FQDN, Kubernetes Pod name, or comparable unique
    // and self-describing value as the ID suffix.
    string suffix = 2;
  }
  ID id = 1 [ (gogoproto.nullable) = false ];
  // Advertised URL of the process.
  string endpoint = 2 [ (gogoproto.casttype) = "Endpoint" ];

  // Route.AttachEndpoints makes use of the `GetEndpoint() Endpoint` interface.
  option (gogoproto.goproto_getters) = true;
}

// BrokerSpec describes a Gazette broker and its configuration.
message BrokerSpec {
  // ProcessSpec of the broker.
  ProcessSpec process_spec = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.embed) = true,
    (gogoproto.moretags) = "yaml:\",inline\""
  ];
  // Maximum number of assigned Journal replicas.
  uint32 journal_limit = 2;
}

// Fragment is a content-addressed description of a contiguous Journal span,
// defined by the [begin, end) offset range covered by the Fragment and the
// SHA1 sum of the corresponding Journal content.
message Fragment {
  // Journal of the Fragment.
  string journal = 1 [ (gogoproto.casttype) = "Journal" ];
  // Begin (inclusive) and end (exclusive) offset of the Fragment within the
  // Journal.
  int64 begin = 2 [ (gogoproto.casttype) = "Offset" ];
  int64 end = 3 [ (gogoproto.casttype) = "Offset" ];
  // SHA1 sum of the Fragment's content.
  SHA1Sum sum = 4 [ (gogoproto.nullable) = false ];
  // Codec with which the Fragment's content is compressed.
  CompressionCodec compression_codec = 5;
  // Fragment store which backs the Fragment. Empty if the Fragment has yet to
  // be persisted and is still local to a Broker.
  string backing_store = 6 [ (gogoproto.casttype) = "FragmentStore" ];
  // Modification timestamp of the Fragment within the backing store,
  // represented as seconds since the epoch.
  int64 mod_time = 7;
  // Path postfix under which the fragment is persisted to the store.
  // The complete Fragment store path is built from any path components of the
  // backing store, followed by the journal name, followed by the path postfix.
  string path_postfix = 8;
}

// SHA1Sum is a 160-bit SHA1 digest.
message SHA1Sum {
  fixed64 part1 = 1;
  fixed64 part2 = 2;
  fixed32 part3 = 3;
}

// ReadRequest is the unary request message of the broker Read RPC.
message ReadRequest {
  // Header is attached by a proxying broker peer.
  Header header = 1;
  // Journal to be read.
  string journal = 2 [ (gogoproto.casttype) = "Journal" ];
  // Desired offset to begin reading from. Value -1 has special handling, where
  // the read is performed from the current write head. All other positive
  // values specify a desired exact byte offset to read from. If the offset is
  // not available (eg, because it represents a portion of Journal which has
  // been permanently deleted), the broker will return the next available
  // offset. Callers should therefore always inspect the ReadResponse offset.
  int64 offset = 3 [ (gogoproto.casttype) = "Offset" ];
  // Whether the operation should block until content becomes available.
  // OFFSET_NOT_YET_AVAILABLE is returned if a non-blocking read has no ready
  // content.
  bool block = 4;
  // If do_not_proxy is true, the broker will not proxy the read to another
  // broker, or open and proxy a remote Fragment on the client's behalf.
  bool do_not_proxy = 5;
  // If metadata_only is true, the broker will respond with Journal and
  // Fragment metadata but not content.
  bool metadata_only = 6;
  // Offset to read through. If zero, then the read end offset is unconstrained.
  int64 end_offset = 7 [ (gogoproto.casttype) = "Offset" ];
}

// ReadResponse is the streamed response message of the broker Read RPC.
// Responses messages are of two types:
//
// * "Metadata" messages, which conveys the journal Fragment addressed by the
//    request which is ready to be read.
// * "Chunk" messages, which carry associated journal Fragment content bytes.
//
// A metadata message specifying a Fragment always precedes all "chunks" of the
// Fragment's content. Response streams may be very long lived, having many
// metadata and accompanying chunk messages. The reader may also block for long
// periods of time awaiting the next metadata message (eg, if the next offset
// hasn't yet committed). However once a metadata message is read, the reader
// is assured that its associated chunk messages are immediately forthcoming.
message ReadResponse {
  // Status of the Read RPC.
  Status status = 1;
  // Header of the response. Accompanies the first ReadResponse of the response
  // stream.
  Header header = 2;
  // The effective offset of the read. See ReadRequest offset.
  int64 offset = 3 [ (gogoproto.casttype) = "Offset" ];
  // The offset to next be written, by the next append transaction served by
  // broker. In other words, the last offset through which content is
  // available to be read from the Journal. This is a metadata field and will
  // not be returned with a content response.
  int64 write_head = 4 [ (gogoproto.casttype) = "Offset" ];
  // Fragment to which the offset was mapped. This is a metadata field and will
  // not be returned with a content response.
  Fragment fragment = 5;
  // If Fragment is remote, a URL from which it may be directly read.
  string fragment_url = 6;
  // Content chunks of the read.
  bytes content = 7;
}

// AppendRequest is the streamed request message of the broker Append RPC.
// Append request streams consist of an initial message having all parameters
// of the append, such as the journal to append to and preconditions, followed
// by an unbounded number of messages having only content "chunks".
//
// It's not required that the appender know the append size when starting the
// Append RPC -- rather, the client indicates the stream is complete by sending
// a final, empty "chunk" message. However be aware that the broker will
// aggressively time out stalled Append clients, and clients should not start
// RPCs until all content chunks are available for immediate writing.
//
// Append RPCs also expose a concept of journal "registers": LabelSets
// which participate in the journal's transactional append machinery.
// Note that registers are sent and verified with every replicated journal
// transaction, so they're _really_ intended to be very small.
//
// Append RPCs may upsert (union) or delete (subtract) labels from the
// journal's registers. Register consensus is achieved by piggy-backing on the
// append itself: if peers disagree, the registers of the replica having the
// largest journal byte offset always win. For this reason, only RPCs appending
// at least one byte may modify registers.
//
// Append RPCs may also require that registers match an arbitrary selector
// before the RPC may proceed. For example, a write fence can be implemented
// by requiring that a "author" register is of an expected value. At-most-once
// semantics can be implemented as a check-and-set over a single register.
//
// Also be aware that a register update can still occur even for RPCs which are
// reported as failed to the client. That's because an append RPC succeeds
// only after all replicas acknowledge it, but a RPC which applies to some
// replicas but not all still moves the journal offset forward, and therefore
// updates journal registers.
message AppendRequest {
  option (gogoproto.equal) = true;

  // Header is attached by a proxying broker peer to the first AppendRequest
  // message.
  Header header = 1;
  // Journal to be appended to.
  string journal = 2 [ (gogoproto.casttype) = "Journal" ];
  // If do_not_proxy is true, the broker will not proxy the append if it is
  // not the current primary.
  bool do_not_proxy = 3;
  // Journal offset at which the append should begin. Most clients should leave
  // at zero, which uses the broker's tracked offset. The append offset must be
  // one greater than furthest written offset of the journal, or
  // WRONG_APPEND_OFFSET is returned.
  int64 offset = 5 [ (gogoproto.casttype) = "Offset" ];
  // Selector of journal registers which must be satisfied for the request
  // to proceed. If not matched, the RPC is failed with REGISTER_MISMATCH.
  //
  // There's one important exception: if the set of registers associated with
  // a journal is completely empty, then *any* selector is considered as
  // matching. While perhaps surprising, this behavior supports the intended
  // use of registers for cooperative locking, whereby an empty set of
  // registers can be thought of as an "unlocked" state. More practically, if
  // Etcd consensus is lost then so are current register values: on recovery
  // journals will restart with an empty set. This behavior ensures that an
  // existing process holding a prior lock can continue to write -- at least
  // until another process updates registers once again.
  LabelSelector check_registers = 6;
  // Labels to union with current registers if the RPC succeeds and appended
  // at least one byte.
  LabelSet union_registers = 7;
  // Labels to subtract from current registers if the RPC succeeds and appended
  // at least one byte.
  LabelSet subtract_registers = 8;

  // Content chunks to be appended. Immediately prior to closing the stream,
  // the client must send an empty chunk (eg, zero-valued AppendRequest) to
  // indicate the Append should be committed. Absence of this empty chunk
  // prior to EOF is interpreted by the broker as a rollback of the Append.
  bytes content = 4;
}

// AppendResponse is the unary response message of the broker Append RPC.
message AppendResponse {
  // Status of the Append RPC.
  Status status = 1;
  // Header of the response.
  Header header = 2 [ (gogoproto.nullable) = false ];
  // If status is OK, then |commit| is the Fragment which places the
  // committed Append content within the Journal.
  Fragment commit = 3;
  // Current registers of the journal.
  LabelSet registers = 4;
  // Total number of RPC content chunks processed in this append.
  int64 total_chunks = 5;
  // Number of content chunks which were delayed by journal flow control.
  int64 delayed_chunks = 6;
}

// ReplicateRequest is the streamed request message of the broker's internal
// Replicate RPC. Each message is either a pending content chunk or a
// "proposal" to commit (or roll back) content chunks previously sent.
message ReplicateRequest {
  // Header defines the primary broker, Route, and Etcd Revision under which
  // this Replicate stream is being established. Each replication peer
  // independently inspects and verifies the current Journal Route topology.
  Header header = 1;

  // Proposed Fragment to commit, which is verified by each replica.
  Fragment proposal = 3;
  // Registers proposed to apply, which are also verified by each replica.
  LabelSet registers = 7;
  // Acknowledge requests that the peer send an acknowledging ReplicateResponse
  // on successful application of the ReplicateRequest.
  bool acknowledge = 6;
  // Journal to be replicated to, which is also captured by |proposal|.
  // Deprecated.
  string deprecated_journal = 2 [ (gogoproto.casttype) = "Journal" ];

  // Content to be replicated.
  bytes content = 4;
  // Delta offset of |content| relative to current Fragment |end|.
  int64 content_delta = 5;
}

// ReplicateResponse is the streamed response message of the broker's internal
// Replicate RPC. Each message is a 1:1 response to a previously read "proposal"
// ReplicateRequest with |acknowledge| set.
message ReplicateResponse {
  // Status of the Replicate RPC.
  Status status = 1;
  // Header of the response. Accompanies the first ReplicateResponse of the
  // response stream.
  Header header = 2;
  // If status is PROPOSAL_MISMATCH, then |fragment| is the replica's current
  // journal Fragment, and either it or |registers| will differ from the
  // primary's proposal.
  Fragment fragment = 3;
  // If status is PROPOSAL_MISMATCH, then |registers| are the replica's current
  // journal registers.
  LabelSet registers = 4;
}

// ListRequest is the unary request message of the broker List RPC.
message ListRequest {
  // Tags used for unimplemented, removed page_limit / page_token.
  reserved 2, 3;
  // Selector optionally refines the set of journals which will be enumerated.
  // If zero-valued, all journals are returned. Otherwise, only JournalSpecs
  // matching the LabelSelector will be returned. Two meta-labels "name" and
  // "prefix" are additionally supported by the selector, where:
  //   * name=examples/a-name will match a JournalSpec with Name
  //   "examples/a-name"
  //   * prefix=examples/ will match any JournalSpec having prefix "examples/".
  //     The prefix Label value must end in '/'.
  LabelSelector selector = 1 [ (gogoproto.nullable) = false ];
}

// ListResponse is the unary response message of the broker List RPC.
message ListResponse {
  // Tag used for unimplemented, removed next_page_token.
  reserved 4;
  // Status of the List RPC.
  Status status = 1;
  // Header of the response.
  Header header = 2 [ (gogoproto.nullable) = false ];
  // Journals of the response.
  message Journal {
    JournalSpec spec = 1 [ (gogoproto.nullable) = false ];
    // Current ModRevision of the JournalSpec.
    int64 mod_revision = 2;
    // Route of the journal, including endpoints.
    Route route = 3 [ (gogoproto.nullable) = false ];
  }
  repeated Journal journals = 3 [ (gogoproto.nullable) = false ];
}

// ApplyRequest is the unary request message of the broker Apply RPC.
message ApplyRequest {
  // Change defines an insertion, update, or deletion to be applied to the set
  // of JournalSpecs. Exactly one of |upsert| or |delete| must be set.
  message Change {
    // Expected ModRevision of the current JournalSpec. If the Journal is being
    // created, expect_mod_revision is zero.
    int64 expect_mod_revision = 1;
    // JournalSpec to be updated (if expect_mod_revision > 0) or created
    // (if expect_mod_revision == 0).
    JournalSpec upsert = 2;
    // Journal to be deleted. expect_mod_revision must not be zero.
    string delete = 3 [ (gogoproto.casttype) = "Journal" ];
  }
  repeated Change changes = 1 [ (gogoproto.nullable) = false ];
}

// ApplyResponse is the unary response message of the broker Apply RPC.
message ApplyResponse {
  // Status of the Apply RPC.
  Status status = 1;
  // Header of the response.
  Header header = 2 [ (gogoproto.nullable) = false ];
}

// FragmentsRequest is the unary request message of the broker ListFragments
// RPC.
message FragmentsRequest {
  // Header is attached by a proxying broker peer.
  Header header = 1;
  // Journal to be read.
  string journal = 2 [ (gogoproto.casttype) = "Journal" ];
  // BeginModTime is an optional field specifying an inclusive lower bound on
  // the modification timestamp for a fragment to be returned. The timestamp is
  // represented as seconds since the epoch.
  int64 begin_mod_time = 3;
  // EndModTime is an optional field specifying an exclusive upper bound on
  // the modification timestamp for a fragment to be returned. The timestamp is
  // represented as seconds since the epoch.
  int64 end_mod_time = 4;
  // The NextPageToke value returned from a previous, continued
  // FragmentsRequest, if any.
  int64 next_page_token = 5;
  // PageLimit is an optional field specifying how many fragments to return
  // with the response. The default value for PageLimit is 1000.
  int32 page_limit = 6;
  // SignatureTTL indicates that a temporary signed GET URL should be returned
  // with each response Fragment, valid for |signatureTTL|.
  google.protobuf.Duration signatureTTL = 7
      [ (gogoproto.stdduration) = true, (gogoproto.nullable) = true ];
  // If do_not_proxy is true, the broker will not proxy the request to another
  // broker on the client's behalf.
  bool do_not_proxy = 8;
}

// FragmentsResponse is the unary response message of the broker ListFragments
// RPC.
message FragmentsResponse {
  // Status of the Apply RPC.
  Status status = 1;
  // Header of the response.
  Header header = 2 [ (gogoproto.nullable) = false ];
  // Fragments of the Response.
  message _Fragment {
    Fragment spec = 1 [ (gogoproto.nullable) = false ];
    // SignedURL is a temporary URL at which a direct GET of the Fragment may
    // be issued, signed by the broker's credentials. Set only if the request
    // specified a SignatureTTL.
    string signed_url = 2;
  }
  repeated _Fragment fragments = 3 [ (gogoproto.nullable) = false ];
  // The NextPageToke value to be returned on subsequent Fragments requests. If
  // the value is zero then there are no more fragments to be returned for this
  // page.
  int64 next_page_token = 4;
}

// Route captures the current topology of an item and the processes serving it.
message Route {
  option (gogoproto.equal) = true;

  // Members of the Route, ordered on ascending ProcessSpec.ID (zone, suffix).
  repeated ProcessSpec.ID members = 1 [ (gogoproto.nullable) = false ];
  // Index of the ProcessSpec serving as primary within |members|,
  // or -1 of no member is currently primary.
  int32 primary = 2;
  // Endpoints of each Route member. If not empty, |endpoints| has the same
  // length and order as |members|, and captures the endpoint of each one.
  repeated string endpoints = 3 [ (gogoproto.casttype) = "Endpoint" ];
}

// Header captures metadata such as the process responsible for processing
// an RPC, and its effective Etcd state.
message Header {
  option (gogoproto.equal) = true;

  // ID of the process responsible for request processing. May be empty iff
  // Header is being used within a proxied request, and that request may be
  // dispatched to any member of the Route.
  ProcessSpec.ID process_id = 1 [ (gogoproto.nullable) = false ];
  // Route of processes specifically responsible for this RPC, or an empty Route
  // if any process is capable of serving the RPC.
  Route route = 2 [ (gogoproto.nullable) = false ];
  // Etcd represents the effective Etcd MVCC state under which a Gazette broker
  // is operating in its processing of requests and responses. Its inclusion
  // allows brokers to reason about relative "happened before" Revision ordering
  // of apparent routing conflicts in proxied or replicated requests, as well
  // as enabling sanity checks over equality of Etcd ClusterId (and precluding,
  // for example, split-brain scenarios where different brokers are backed by
  // different Etcd clusters). Etcd is kept in sync with
  // etcdserverpb.ResponseHeader.
  message Etcd {
    option (gogoproto.equal) = true;

    // cluster_id is the ID of the cluster.
    uint64 cluster_id = 1;
    // member_id is the ID of the member.
    uint64 member_id = 2;
    // revision is the Etcd key-value store revision when the request was
    // applied.
    int64 revision = 3;
    // raft_term is the raft term when the request was applied.
    uint64 raft_term = 4;
  }
  Etcd etcd = 3 [ (gogoproto.nullable) = false ];
}

// Journal is the Gazette broker service API for interacting with Journals.
service Journal {
  // List Journals, their JournalSpecs and current Routes.
  rpc List(ListRequest) returns (ListResponse);
  // Apply changes to the collection of Journals managed by the brokers.
  rpc Apply(ApplyRequest) returns (ApplyResponse);
  // Read from a specific Journal.
  rpc Read(ReadRequest) returns (stream ReadResponse);
  // Append content to a specific Journal.
  rpc Append(stream AppendRequest) returns (AppendResponse);
  // Replicate appended content of a Journal. Replicate is used between broker
  // peers in the course of processing Append transactions, but is not intended
  // for direct use by clients.
  rpc Replicate(stream ReplicateRequest) returns (stream ReplicateResponse);
  // List Fragments of a Journal.
  rpc ListFragments(FragmentsRequest) returns (FragmentsResponse);
}
